{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sameergupta_dataflow\\\\Desktop\\\\X-AuditV2\\\\frontend\\\\src\\\\components\\\\Landing.jsx\",\n  _s = $RefreshSig$();\n// import CustomButton from '../CustomButton';\n// import React, { useState, useEffect } from 'react';\n// // import Header from '../Header';\n// import { FormControl, InputLabel, MenuItem, Select, Typography, TextField, Grid, Box, Paper, Snackbar, Alert } from '@mui/material';\n// import axios from 'axios';\n// import '../css/styles.css';\n// // import { useNavigate } from 'react-router-dom';\n// import Cookies from 'js-cookie'\n// import {\n//     audit_type_check, audit_type_status, audit_type_is_there_any_case_error, case_select_category, case_error_definition\n//     , case_final_error_category\n//     , cwe_check_status,\n//     cwithoute_check_status, cwithoute_change_status, cwe_error_definition, cwe_select_category, cwe_change_status\n// } from './options';\n\n// const Landing = () => {\n//     const [barcode, setBarcode] = useState('');\n//     const [audit_type, setAuditType] = useState('');\n//     const [case_error, setCaseError] = useState('');\n//     const [case_status, setCaseStatus] = useState('');\n//     const [componentsWithError, setComponentsWithError] = useState([]);\n//     const [error, setError] = useState(''); \n//     const [errors, setErrors] = useState([]);\n//     const [fieldErrors, setFieldErrors] = useState([]);\n//     const [isRequired, setIsRequired] = useState(false);\n//     const [snackbarOpen, setSnackbarOpen] = useState(false);\n//     const [select_category, selectCategory] = useState('')\n//     const [sub_barcode, setSubbarcode] = useState('')\n//     const [check_status, setCheckStatus] = useState('')\n//     const [change_status, setChangeStatus] = useState('')\n//     const [error_definition, setErrorDefinition] = useState('')\n\n//     const [count_for_cwe, setcountforcwe] = useState(0);\n//     const check_counter_for_cwe_string = count_for_cwe.toString();\n\n//     const [count_for_cwithoute, setcountforcwithoute] = useState(0);\n//     const check_counter_for_cwithoute_string = count_for_cwithoute.toString();\n\n//     const [count_for_errorcase, setcountforerrorcase] = useState(0);\n\n//     const check_counter_for_errorcase_string = count_for_errorcase.toString();\n\n//     const validateSubBarcodeForCwithoutError = (sub_barcode, index) => {\n//         // Combined regex for sub bar code and barcode\n//         const subBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}(-[A-Z]{2}\\d{2})?$/;\n\n//         // Check if barcode matches the combined pattern\n//         const isValid = subBarcodeRegex.test(sub_barcode);\n//         const updatedErrors = [...fieldErrors];\n//         updatedErrors[index] = isValid ? '' : 'Invalid Subbarcode';\n//         setFieldErrors(updatedErrors);\n//     };\n\n//     useEffect(() => {\n//         if (case_error === 'yes' && addNewItem.length === 0) {\n//             handleAddNewItem();\n//         } else if (case_error === 'no' || case_error === 'incomplete') {\n//             setAddNewItem([]);\n//         }\n//     }, [case_error]);\n\n//     const validateBarcode = (barcode) => {\n//         // // Regex for sub bar code\n//         // const fullBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}-[A-Z]{2}\\d{2}$/;\n\n//         // Regex for barcode \n//         const partialBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}$/;\n\n//         // Check if barcode matches either pattern\n//         if (partialBarcodeRegex.test(barcode)) {\n//             return true;\n//         }\n//         return false;\n//     };\n\n//     const validateSubBarcodeforcwe = (barcode, index) => {\n//         // Combined regex for sub bar code and barcode\n//         const subBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}(-[A-Z]{2}\\d{2})?$/;\n\n//         // Check if barcode matches the combined pattern\n//         const isValid = subBarcodeRegex.test(barcode);\n//         const updatedErrors = [...errors];\n//         updatedErrors[index] = isValid ? '' : 'Invalid Subbarcode';\n//         setErrors(updatedErrors);\n//     };\n\n//     const accessToken = Cookies.get('access_token');\n\n//     // const handleSaveOrSubmit = async (e, status) => {\n//     //     e.preventDefault();\n\n//     //     const formData = {\n//     //         barcode,\n//     //         audit_type,\n//     //         case_error,\n//     //         case_status,\n//     //         status: status,\n//     //         created_at: new Date().toISOString().split('T')[0],\n//     //         error_cases: addNewItem.map(item => ({\n//     //             select_category: item.select_category,\n//     //             error_definition: item.errorDefinition,\n//     //             final_error_category: item.finalErrorCategory,\n//     //             remarks: item.remarks,\n//     //             remarks_for_operations: item.remarks_for_operations,\n//     //             // files: item.fil ? Array.from(item.file).map(file => ({\n//     //             //     name: file.name,\n//     //             //     size: file.size,\n//     //             //     type: file.type\n//     //             // })) : [], \n//     //             files: item.file.map(f => ({\n//     //                 file: f.file\n//     //             })),\n//     //             counter1: check_counter_for_errorcase_string\n//     //         })),\n\n//     //         componentsWithError: componentsWithError.map(component => ({\n//     //             select_category: component.select_category,\n//     //             sub_barcode: component.sub_barcode,\n//     //             change_status: component.change_status,\n//     //             check_status: component.check_status,\n//     //             remarks: component.remarks,\n//     //             error_definition: component.error_definition,\n//     //             remarks_for_operations: component.remarks_for_operations,\n//     //             // files: component.file ? Array.from(component.file).map(file => ({\n//     //             //     name: file.name,\n//     //             //     size: file.size,\n//     //             //     type: file.type\n//     //             // })) : [], \n//     //             files: component.file.map(f => ({\n//     //                 file: f.file\n//     //             })),\n//     //             counter2: check_counter_for_cwe_string\n//     //         })),\n\n//     //         componentsWithoutError: componentsWithoutError.map(component => ({\n//     //             sub_barcode: component.sub_barcode,\n\n//     //             remarks: component.remarks,\n//     //             remarks_for_operations: component.remarks_for_operations,\n//     //             counter3: check_counter_for_cwithoute_string,\n\n//     //             check_status: component.check_status,\n//     //             change_status: component.change_status,\n\n//     //         })),\n//     //     };\n\n//     //     localStorage.setItem('formData', JSON.stringify(formData));\n\n//     //     console.log({ formData })\n\n//     //     try {\n//     //         const response = await axios.post('http://127.0.0.1:8000/api/auth/audit/', formData, {\n//     //             headers: {\n//     //                 'Content-Type': 'application/json',\n//     //                 'Authorization': `Bearer ${accessToken}`,\n//     //             },\n//     //         });\n\n//     //         console.log('Response:', response.data);\n\n//     //         //   // Optionally, remove data from localStorage after successful submission\n//     //         //   localStorage.removeItem('formData');\n//     //     } catch (error) {\n//     //         console.error('Error submitting form:', error);\n//     //     }\n//     // };\n\n//     const handleSaveOrSubmit = async (e, status) => {\n//         e.preventDefault();\n\n//         const formData = {\n//             barcode,\n//             audit_type,\n//             case_error,\n//             case_status,\n//             status: status,\n//             created_at: new Date().toISOString().split('T')[0],\n//             error_cases: (addNewItem || []).map(item => ({\n//                 select_category: item.select_category,\n//                 error_definition: item.errorDefinition,\n//                 final_error_category: item.finalErrorCategory,\n//                 remarks: item.remarks,\n//                 remarks_for_operations: item.remarks_for_operations,\n//                 files: (item.file || []).map(f => ({\n//                     file: f.file\n//                 })),\n//                 counter1: check_counter_for_errorcase_string\n//             })),\n\n//             componentsWithError: (componentsWithError || []).map(component => ({\n//                 select_category: component.select_category,\n//                 sub_barcode: component.sub_barcode,\n//                 change_status: component.change_status,\n//                 check_status: component.check_status,\n//                 remarks: component.remarks,\n//                 error_definition: component.error_definition,\n//                 remarks_for_operations: component.remarks_for_operations,\n//                 files: (component.file || []).map(f => ({\n//                     file: f.file\n//                 })),\n//                 counter2: check_counter_for_cwe_string\n//             })),\n\n//             componentsWithoutError: (componentsWithoutError || []).map(component => ({\n//                 sub_barcode: component.sub_barcode,\n//                 remarks: component.remarks,\n//                 remarks_for_operations: component.remarks_for_operations,\n//                 counter3: check_counter_for_cwithoute_string,\n//                 check_status: component.check_status,\n//                 change_status: component.change_status,\n//             })),\n//         };\n\n//         localStorage.setItem('formData', JSON.stringify(formData));\n//         console.log({ formData });\n\n//         try {\n//             const response = await axios.post('http://127.0.0.1:8000/api/auth/audit/', formData, {\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${accessToken}`,\n//                 },\n//             });\n//             console.log('Response:', response.data);\n//         } catch (error) {\n//             console.error('Error submitting form:', error);\n//         }\n//     };\n\n//     // const handleSubmit = (e) => {\n//     //     e.preventDefault(); // Prevent the default form submission behavior\n\n//     //     // Check for other required fields\n//     //     if (!barcode || !audit_type || !case_error || !case_status) {\n//     //         setSnackbarOpen(true);\n//     //         return; // Stop the submission process if any required field is missing\n//     //     }\n\n//     //     // Validate barcode\n//     //     if (!validateBarcode(barcode)) {\n//     //         alert('Please fill in the correct barcode.');\n//     //         return; // Stop the submission process if validation fails\n//     //     }\n\n//     //     // Proceed with save or submit if all validations pass\n//     //     handleSaveOrSubmit(e, 'submitted');\n//     //     setIsRequired(true);\n//     // };\n//     const handleSubmit = (e) => {\n//         e.preventDefault(); // Prevent the default form submission behavior\n\n//         // Check for other required fields\n//         if (!barcode || !audit_type || !case_error || !case_status) {\n//             setSnackbarOpen(true);\n//             return; // Stop the submission process if any required field is missing\n//         }\n\n//         // Validate barcode\n//         if (!validateBarcode(barcode)) {\n//             alert('Please fill in the correct barcode.');\n//             return; // Stop the submission process if validation fails\n//         }\n\n//         // Proceed with save or submit if all validations pass\n//         handleSaveOrSubmit(e, 'submitted');\n//         setIsRequired(true);\n//     };\n\n//     // const handleSave = (e) => { handleSaveOrSubmit(e, 'draft'); setIsRequired(false); alert('Form Saved Successfully') };\n//     const handleSave = (e) => { \n//         handleSaveOrSubmit(e, 'draft'); \n//         setIsRequired(false); \n//         alert('Form Saved Successfully'); \n//     };\n//     const handleCloseSnackbar = () => {\n//         setSnackbarOpen(false);\n//     };\n\n//     const handleInpChange = (e) => {\n//         setBarcode(e.target.value.toUpperCase());\n//         if (!validateBarcode(e.target.value)) {\n//             setError('Invalid barcode');\n//         } else {\n//             setError('');\n//         }\n//     }\n//     const handleAuditChange = (e) => setAuditType(e.target.value);\n//     const handleCaseErrorChange = (e) => setCaseError(e.target.value);\n//     const handleCaseStatusChange = (e) => setCaseStatus(e.target.value);\n\n//     // test component without error\n//     const [componentsWithoutError, setComponentsWithoutError] = useState([]);\n\n//     // Method to handle input changes for components without error\n//     const handleInputChangeWithoutError = (index, field, value) => {\n//         setComponentsWithoutError(prevComponents => {\n//             const updatedComponents = [...prevComponents];\n//             updatedComponents[index] = { ...updatedComponents[index], [field]: value };\n//             return updatedComponents;\n//         });\n//     };\n\n//     // Method to add a new component without error\n\n//     const handleAddComponentWithoutError = () => {\n//         setcountforcwithoute(count_for_cwithoute + 1);\n//         setComponentsWithoutError(prevComponents => [\n//             ...prevComponents,\n//             {\n//                 barcode: '',\n//                 audit_type: '',\n//                 case_status: '',\n//                 remarks: '',\n//                 remarks_for_operations: ''\n//             }\n//         ]);\n//     };\n\n//     // Method to remove a component without error by index\n//     const handleRemoveComponentWithoutError = (index) => {\n//         setComponentsWithoutError(prevComponents =>\n//             prevComponents.filter((_, i) => i !== index)\n//         );\n//         setcountforcwithoute(count_for_cwithoute - 1);\n//     };\n\n//     const handleInputChangeWithError = (index, field, value) => {\n//         const updatedComponents = [...componentsWithError];\n//         if (field === 'file') {\n//             updatedComponents[index][field] = value;\n//         } else {\n//             updatedComponents[index][field] = value;\n//         }\n//         setComponentsWithError(updatedComponents);\n\n//         if (field === 'barcode') {\n//             validateSubBarcodeforcwe(value, index);\n//         }\n//     };\n\n//     const handleFileInputChangeWithError = async (index, files) => {\n//         const updatedComponents = [...componentsWithError];\n\n//         // Convert files to an array if not already\n//         const filesArray = Array.from(files);\n\n//         // Convert files to base64 and store as objects\n//         const base64Files = await Promise.all(filesArray.map(async file => ({\n//             file: await convertToBase64(file)\n//         })));\n\n//         updatedComponents[index]['file'] = base64Files;\n\n//         setComponentsWithError(updatedComponents);\n//     };\n\n//     const convertToBase64 = (file) => {\n//         return new Promise((resolve, reject) => {\n//             const reader = new FileReader();\n//             reader.readAsDataURL(file);\n//             reader.onload = () => resolve(reader.result);\n//             reader.onerror = error => reject(error);\n//         });\n//     };\n\n//     // Method to add a new component with error\n\n//     const handleAddComponentWithError = () => {\n//         setcountforcwe(count_for_cwe + 1);\n//         setComponentsWithError([\n//             ...componentsWithError,\n//             {\n//                 barcode: '',\n//                 audit_type: '',\n//                 case_error: '',\n//                 case_status: '',\n//                 remarks: '',\n//                 remarks_for_operations: '',\n//                 file: null\n//             }\n//         ]);\n//         setErrors([...errors, '']);\n//     };\n\n//     // Method to remove a component with error by index\n\n//     const handleRemoveComponentWithError = (index) => {\n//         const updatedComponents = componentsWithError.filter((_, i) => i !== index);\n//         const updatedErrors = errors.filter((_, i) => i !== index);\n//         setComponentsWithError(updatedComponents);\n//         setErrors(updatedErrors);\n//         setcountforcwe(count_for_cwe - 1);\n//     };\n\n//     const [addNewItem, setAddNewItem] = useState([]);\n\n//     const handleAddNewItem = () => {\n//         setcountforerrorcase(count_for_errorcase + 1);\n//         setAddNewItem([\n//             ...addNewItem,\n//             {\n//                 audit_type: '',\n//                 errorDefinition: '',\n//                 finalErrorCategory: '',\n//                 remarks: '',\n//                 remarks_for_operations: '',\n//                 file: null, // Add file property\n//             },\n//         ]);\n//     };\n\n//     const handleInputnewchange = (index, field, value) => {\n//         const updatedItems = addNewItem.map((item, i) =>\n//             i === index ? { ...item, [field]: value } : item\n//         );\n//         setAddNewItem(updatedItems);\n//     };\n\n// //////////////////////////////////\n// const handleFileChange = async (index, files) => {\n//     const updatedComponents = [...addNewItem];\n\n//     // Convert files to an array if not already\n//     const filesArray = Array.from(files);\n\n//     // Convert files to base64 and store as objects\n//     const base64Files = await Promise.all(filesArray.map(async file => ({\n//         file: await convertToBase64forcaseerror(file)\n//     })));\n\n//     updatedComponents[index]['file'] = base64Files;\n\n//     setAddNewItem(updatedComponents);\n// };\n\n// const convertToBase64forcaseerror = (file) => {\n//     return new Promise((resolve, reject) => {\n//         const reader = new FileReader();\n//         reader.readAsDataURL(file);\n//         reader.onload = () => resolve(reader.result);\n//         reader.onerror = error => reject(error);\n//     });\n// };\n\n//     const handleRemoveNewItem = (index) => {\n//         setcountforerrorcase(count_for_errorcase - 1);\n//         const updatedItems = addNewItem.filter((_, i) => i !== index);\n//         setAddNewItem(updatedItems);\n//     };\n\n//     return (\n//         <>\n//             {/* <Header /> */}\n//             <Box sx={{ width: '100%', padding: '50px 0', display: 'flex', justifyContent: 'center' }}>\n//                 <Paper elevation={0} sx={{ width: '100%', maxWidth: '1500px', padding: '20px', overflow: 'hidden', margin: '20px' }}>\n//                     <Typography variant=\"h3\" sx={{ color: '#D9531E', textAlign: 'center', marginBottom: '60px' }}>\n//                         Audit Portal\n//                     </Typography>\n\n//                     <form onSubmit={handleSubmit}>\n//                         <Grid container spacing={2}>\n//                             <Grid item xs={12} md={3}>\n//                                 <FormControl fullWidth>\n//                                     <InputLabel>Type of Audit</InputLabel>\n//                                     <Select required={isRequired}\n//                                         value={audit_type || ''}\n//                                         onChange={handleAuditChange}\n//                                         label=\"Type of Audit\"\n//                                     >\n//                                         {audit_type_check.map((item, index) => (\n//                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                         ))}\n\n//                                     </Select>\n//                                 </FormControl>\n//                             </Grid>\n//                             <Grid item xs={12} md={3}>\n//                                 <FormControl fullWidth>\n//                                     <TextField required={isRequired}\n//                                         label=\"Barcode\"\n//                                         placeholder=\"Barcode\"\n//                                         value={barcode}\n//                                         onChange={handleInpChange}\n//                                         inputProps={{ minLength: 16, maxLength: 16 }}\n//                                         error={!!error}\n//                                         helperText={error}\n//                                     />\n//                                 </FormControl>\n//                             </Grid>\n//                             <Grid item xs={12} md={3}>\n//                                 <FormControl fullWidth>\n//                                     <InputLabel>Status</InputLabel>\n//                                     <Select required={isRequired}\n//                                         value={case_status || ''}\n//                                         onChange={handleCaseStatusChange}\n//                                         label=\"Case Status\"\n//                                     >\n//                                         {audit_type_status.map((item, index) => (\n//                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                         ))}\n//                                     </Select>\n//                                 </FormControl>\n//                             </Grid>\n//                             <Grid item xs={12} md={3}>\n//                                 <FormControl fullWidth>\n//                                     <InputLabel>Is there any case error?</InputLabel>\n//                                     <Select required={isRequired}\n//                                         value={case_error || ''}\n//                                         onChange={handleCaseErrorChange}\n//                                         label=\"Case Error\"\n//                                     >\n//                                         {audit_type_is_there_any_case_error.map((item, index) => (\n//                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                         ))}\n//                                     </Select>\n//                                 </FormControl>\n//                             </Grid>\n\n//                             <Box sx={{ margin: '20px', width: '100%' }}>\n//                                 {addNewItem.map((item, index) => (\n//                                     <Box\n//                                         key={index}\n//                                         sx={{\n//                                             border: '1px solid #ddd',\n//                                             padding: '16px',\n//                                             margin: '16px 0',\n//                                             borderRadius: '8px',\n//                                             width: '100%',\n//                                         }}\n//                                     >\n\n//                                         {/* <h1>Counter For Case Error {count_for_errorcase}</h1> */}\n//                                         <Typography variant='h6' gutterBottom sx={{ marginBottom: '16px' }}>\n//                                             Case Error {index + 1}\n//                                         </Typography>\n\n//                                         <Grid container spacing={3}>\n//                                             <Grid item xs={12} sm={4}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Select Category</InputLabel>\n//                                                     <Select\n//                                                         required\n//                                                         value={item.select_category || ''}\n//                                                         onChange={(e) => handleInputnewchange(index, 'select_category', e.target.value)}\n//                                                         label=\"Select Category\"\n//                                                     >\n//                                                         {case_select_category.map((category, idx) => (\n//                                                             <MenuItem key={idx} value={category.value}>{category.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={4}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Error Definition</InputLabel>\n//                                                     <Select\n//                                                         required\n//                                                         value={item.errorDefinition || ''}\n//                                                         onChange={(e) => handleInputnewchange(index, 'errorDefinition', e.target.value)}\n//                                                         label=\"Error Definition\"\n//                                                     >\n//                                                         {case_error_definition.map((definition, idx) => (\n//                                                             <MenuItem key={idx} value={definition.value}>{definition.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={4}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Final Error Category</InputLabel>\n//                                                     <Select\n//                                                         required\n//                                                         value={item.finalErrorCategory || ''}\n//                                                         onChange={(e) => handleInputnewchange(index, 'finalErrorCategory', e.target.value)}\n//                                                         label=\"Final Error Category\"\n//                                                     >\n//                                                         {case_final_error_category.map((category, idx) => (\n//                                                             <MenuItem key={idx} value={category.value}>{category.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <TextField\n//                                                     multiline\n//                                                     rows={4}\n//                                                     label=\"Remarks\"\n//                                                     value={item.remarks}\n//                                                     onChange={(e) => handleInputnewchange(index, 'remarks', e.target.value)}\n//                                                     fullWidth\n//                                                 />\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <TextField\n//                                                     multiline\n//                                                     rows={4}\n//                                                     label=\"Remarks for Operations\"\n//                                                     value={item.remarks_for_operations}\n//                                                     onChange={(e) => handleInputnewchange(index, 'remarks_for_operations', e.target.value)}\n//                                                     fullWidth\n//                                                 />\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={12}>\n//                                                 <FormControl fullWidth>\n//                                                     {/* <InputLabel>Upload Files</InputLabel> */}\n//                                                     <TextField required\n//                                                         type=\"file\"\n//                                                         inputProps={{ multiple: true }} // Allow multiple file uploads\n//                                                         onChange={(e) => handleFileChange(index, e.target.files)}\n//                                                         fullWidth\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n\n//                                             <Grid item xs={12}>\n//                                                 <Grid container justifyContent=\"flex-start\" alignItems=\"center\" spacing={2}>\n//                                                     <Grid item>\n//                                                         <CustomButton\n//                                                             onClick={() => handleRemoveNewItem(index)}\n//                                                             variant=\"outlined\"\n//                                                             color=\"error\"\n//                                                             sx={{ marginBottom: '20px', marginRight: '10px' }}\n//                                                         >\n//                                                             Remove Item\n//                                                         </CustomButton>\n//                                                     </Grid>\n//                                                     <Grid item>\n//                                                         <CustomButton\n//                                                             onClick={handleAddNewItem}\n//                                                             sx={{ marginBottom: '20px' }}\n//                                                         >\n//                                                             Add Item\n//                                                         </CustomButton>\n//                                                     </Grid>\n//                                                 </Grid>\n//                                             </Grid>\n//                                         </Grid>\n//                                     </Box>\n//                                 ))}\n//                             </Box>\n\n//                             {/* Components With Error */}\n\n//                             <Grid item xs={12} sx={{ marginTop: '20px' }}>\n//                                 {/* <h1>Counter For Cwe {count_for_cwe}</h1> */}\n\n//                                 <Typography variant='h4' gutterBottom sx={{ fontSize: '1.5rem' }}>\n//                                     Components With Error\n//                                 </Typography>\n//                                 <CustomButton onClick={handleAddComponentWithError}>\n//                                     Add Item\n//                                 </CustomButton>\n//                                 {componentsWithError.map((component, index) => (\n//                                     <Box key={index} sx={{ border: '1px solid #ccc', padding: '20px', margin: '20px 0', borderRadius: '8px', overflow: 'hidden' }}>\n//                                         <Typography variant='h6' gutterBottom>Component with Error {index + 1}</Typography>\n//                                         <Grid container spacing={2}>\n//                                             <Grid item xs={12}>\n//                                                 <FormControl fullWidth>\n//                                                     <TextField required={isRequired}\n//                                                         label=\"Enter Sub Bar Code\"\n//                                                         value={component.sub_barcode || ''}\n\n//                                                         onChange={(e) => {\n//                                                             handleInputChangeWithError(index, 'sub_barcode', e.target.value.toUpperCase());\n//                                                             validateSubBarcodeforcwe(e.target.value, index);\n//                                                         }}\n\n//                                                         inputProps={{ minLength: 21, maxLength: 21 }}\n//                                                         error={Boolean(errors[index])}\n//                                                         helperText={errors[index]}\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={4}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Check Status</InputLabel>\n//                                                     <Select required={isRequired}\n//                                                         value={component.check_status || ''}\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'check_status', e.target.value)}\n//                                                         label=\"Check Status\"\n//                                                     >\n//                                                         {cwe_check_status.map((item, index) => (\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={4}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Error Definition</InputLabel>\n//                                                     <Select required={isRequired}\n//                                                         value={component.error_definition || ''}\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'error_definition', e.target.value)}\n//                                                         label=\"Error Definition\"\n//                                                     >\n//                                                         {cwe_error_definition.map((item, index) => (\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n\n//                                             <Grid item xs={12} sm={4}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Select Category</InputLabel>\n//                                                     <Select required={isRequired}\n//                                                         value={component.select_category || ''}\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'select_category', e.target.value)}\n//                                                         label=\"Select Category\"\n//                                                     >\n//                                                         {cwe_select_category.map((item, index) => (\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n\n//                                             <Grid item xs={12} sm={12}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Change Status</InputLabel>\n//                                                     <Select required={isRequired}\n//                                                         value={component.change_status || ''}\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'change_status', e.target.value)}\n//                                                         label=\"Case Status\"\n//                                                     >\n//                                                         {cwe_change_status.map((item, index) => (\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <FormControl fullWidth>\n//                                                     <TextField multiline\n//                                                         rows={4}\n//                                                         label='Remarks'\n//                                                         variant='outlined'\n//                                                         value={component.remarks}\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'remarks', e.target.value)}\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <FormControl fullWidth>\n//                                                     <TextField multiline\n//                                                         rows={4}\n//                                                         label='Remarks for Operations'\n//                                                         variant='outlined'\n//                                                         value={component.remarks_for_operations}\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'remarks_for_operations', e.target.value)}\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={12}>\n//                                                 <FormControl fullWidth>\n//                                                     {/* <InputLabel>Upload Files</InputLabel> */}\n//                                                     <TextField\n//                                                         type=\"file\"\n//                                                         inputProps={{ multiple: true }} // Allow multiple file uploads\n//                                                         onChange={(e) => handleFileInputChangeWithError(index, e.target.files)}\n//                                                         fullWidth\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12}>\n//                                                 <CustomButton onClick={() => handleRemoveComponentWithError(index)}>\n//                                                     Remove Item\n//                                                 </CustomButton>\n//                                             </Grid>\n//                                         </Grid>\n//                                     </Box>\n//                                 ))}\n//                             </Grid>\n\n//                             {/* Components Without Error */}\n//                             <Grid item xs={12} sx={{ marginTop: '20px' }}>\n\n//                                 {/* <h1>Counter For Cwithoute {count_for_cwithoute}</h1> */}\n//                                 <Typography variant='h4' gutterBottom sx={{ fontSize: '1.5rem' }}>\n//                                     Components Without Error\n//                                 </Typography>\n//                                 <CustomButton onClick={handleAddComponentWithoutError}>\n//                                     Add Item\n//                                 </CustomButton>\n//                                 {componentsWithoutError.map((component, index) => (\n//                                     <Box key={index} sx={{ border: '1px solid #ccc', padding: '20px', margin: '20px 0', borderRadius: '8px', overflow: 'hidden' }}>\n//                                         <Typography variant='h6' gutterBottom>Component Without Error {index + 1}</Typography>\n//                                         <Grid container spacing={2}>\n//                                             <Grid item xs={12}>\n//                                                 <FormControl fullWidth>\n//                                                     <TextField required={isRequired}\n//                                                         label=\"Enter Sub Bar Code\"\n//                                                         value={component.sub_barcode}\n//                                                         onChange={(e) => {\n//                                                             handleInputChangeWithoutError(index, 'sub_barcode', e.target.value.toUpperCase());\n//                                                             validateSubBarcodeForCwithoutError(e.target.value, index);\n//                                                         }}\n//                                                         inputProps={{ minLength: 21, maxLength: 21 }}\n//                                                         error={Boolean(fieldErrors[index])}\n//                                                         helperText={fieldErrors[index]}\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Check Status</InputLabel>\n//                                                     <Select required={isRequired}\n//                                                         value={component.check_status || ''}\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'check_status', e.target.value)}\n//                                                         label=\"Check Status\"\n//                                                     >\n//                                                         {cwithoute_check_status.map((item, index) => (\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n//                                                         ))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <FormControl fullWidth>\n//                                                     <InputLabel>Change Status</InputLabel>\n//                                                     <Select required={isRequired}\n//                                                         value={component.change_status || ''}\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'change_status', e.target.value)}\n//                                                         label=\"Change Status\"\n//                                                     >\n//                                                         {cwithoute_change_status.map((item, index) => (\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>))}\n//                                                     </Select>\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <FormControl fullWidth>\n//                                                     <TextField multiline\n//                                                         rows={4}\n//                                                         label='Remarks'\n//                                                         variant='outlined'\n//                                                         value={component.remarks}\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'remarks', e.target.value)}\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12} sm={6}>\n//                                                 <FormControl fullWidth>\n//                                                     <TextField multiline\n//                                                         rows={4}\n//                                                         label='Remarks for Operations'\n//                                                         variant='outlined'\n//                                                         value={component.remarks_for_operations}\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'remarks_for_operations', e.target.value)}\n//                                                     />\n//                                                 </FormControl>\n//                                             </Grid>\n//                                             <Grid item xs={12}>\n//                                                 <CustomButton onClick={() => handleRemoveComponentWithoutError(index)}>\n//                                                     Remove Item\n//                                                 </CustomButton>\n//                                             </Grid>\n//                                         </Grid>\n//                                     </Box>\n//                                 ))}\n//                             </Grid>\n\n//                             <Grid container item xs={12} spacing={2} sx={{ display: 'flex' }}>\n//                                 <Grid item> <CustomButton type=\"submit\">Submit</CustomButton></Grid>\n//                                 <Grid item> <CustomButton onClick={handleSave} >Save</CustomButton></Grid>\n//                             </Grid>\n\n//                             <Snackbar\n//                                 open={snackbarOpen}\n//                                 autoHideDuration={6000}\n//                                 onClose={handleCloseSnackbar}\n//                                 anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//                             >\n//                                 <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%', maxWidth: 400 }}>\n//                                     All fields are required!\n//                                 </Alert>\n//                             </Snackbar>\n\n//                         </Grid>\n//                     </form>\n//                 </Paper>\n//             </Box>\n//         </>\n//     );\n// };\n\n// export default Landing;\n\n// import CustomButton from \"./CustomButton\";\n// import React, { useState, useEffect } from \"react\";\n\n// import {\n//     Grid,\n\n//     Typography,\n//     TextField,\n//     Box,\n//     Paper,\n//     Snackbar,\n//     Alert,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n// // import \"../css/styles.css\";\n\n// import Cookies from \"js-cookie\";\n// import {\n//     audit_type_check,\n//     audit_type_status,\n//     audit_type_is_there_any_case_error,\n//     case_select_category,\n//     case_error_definition,\n//     case_final_error_category,\n// } from \"./options\";\n// import Cwe from \"./Cwe\";\n// import Cwithoute from \"./Cwithoute\";\n// import CustomInputLabel from \"./CustomInputLabel\";\n// import CustomFormControl from \"./CustomFormControl\";\n// import CustomSelect from \"./CustomSelect\";\n// import CustomTextField from \"./CustomTextField\";\n\n// const Landing = () => {\n//     const [barcode, setBarcode] = useState(\"\");\n//     const [audit_type, setAuditType] = useState(\"\");\n//     const [case_error, setCaseError] = useState(\"\");\n//     const [case_status, setCaseStatus] = useState(\"\");\n//     const [componentsWithError, setComponentsWithError] = useState([]);\n//     const [error, setError] = useState(\"\");\n\n//     const [fieldErrors, setFieldErrors] = useState([]);\n//     const [isRequiblack, setIsRequiblack] = useState(false);\n//     const [snackbarOpen, setSnackbarOpen] = useState(false);\n//     const [select_category, selectCategory] = useState(\"\");\n//     const [sub_barcode, setSubbarcode] = useState(\"\");\n//     const [check_status, setCheckStatus] = useState(\"\");\n//     const [change_status, setChangeStatus] = useState(\"\");\n//     const [error_definition, setErrorDefinition] = useState(\"\");\n\n//     const [count_for_cwe, setcountforcwe] = useState(0);\n//     const check_counter_for_cwe_string = count_for_cwe.toString();\n\n//     const [count_for_cwithoute, setcountforcwithoute] = useState(0);\n//     const check_counter_for_cwithoute_string = count_for_cwithoute.toString();\n\n//     const [count_for_errorcase, setcountforerrorcase] = useState(0);\n\n//     const check_counter_for_errorcase_string = count_for_errorcase.toString();\n\n//     useEffect(() => {\n//         if (case_error === \"yes\" && addNewItem.length === 0) {\n//             handleAddNewItem();\n//         } else if (case_error === \"no\" || case_error === \"incomplete\") {\n//             setAddNewItem([]);\n//         }\n//     }, [case_error]);\n\n//     const validateBarcode = (barcode) => {\n//         const partialBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}$/;\n//         if (partialBarcodeRegex.test(barcode)) {\n//             return true;\n//         }\n//         return false;\n//     };\n\n//     const accessToken = Cookies.get(\"access_token\");\n//     const handleSaveOrSubmit = async (e, status) => {\n//         e.preventDefault();\n\n//         const formData = {\n//             barcode,\n//             audit_type,\n//             case_error,\n//             case_status,\n//             status: status,\n//             created_at: new Date().toISOString().split(\"T\")[0],\n//             error_cases: (addNewItem || []).map((item) => ({\n//                 select_category: item.select_category,\n//                 error_definition: item.errorDefinition,\n//                 final_error_category: item.finalErrorCategory,\n//                 remarks: item.remarks,\n//                 remarks_for_operations: item.remarks_for_operations,\n//                 files: (item.file || []).map((f) => ({\n//                     file: f.file,\n//                 })),\n//                 counter1: check_counter_for_errorcase_string,\n//             })),\n\n//             componentsWithError: (componentsWithError || []).map((component) => ({\n//                 select_category: component.select_category,\n//                 sub_barcode: component.sub_barcode,\n//                 change_status: component.change_status,\n//                 check_status: component.check_status,\n//                 remarks: component.remarks,\n//                 error_definition: component.error_definition,\n//                 remarks_for_operations: component.remarks_for_operations,\n//                 files: (component.file || []).map((f) => ({\n//                     file: f.file,\n//                 })),\n//                 counter2: check_counter_for_cwe_string,\n//             })),\n\n//             componentsWithoutError: (componentsWithoutError || []).map(\n//                 (component) => ({\n//                     sub_barcode: component.sub_barcode,\n//                     remarks: component.remarks,\n//                     remarks_for_operations: component.remarks_for_operations,\n//                     counter3: check_counter_for_cwithoute_string,\n//                     check_status: component.check_status,\n//                     change_status: component.change_status,\n//                 })\n//             ),\n//         };\n\n//         localStorage.setItem(\"formData\", JSON.stringify(formData));\n//         console.log({ formData });\n\n//         try {\n//             const response = await axios.post(\n//                 \"http://127.0.0.1:8000/api/auth/audit/\",\n//                 formData,\n//                 {\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                         Authorization: `Bearer ${accessToken}`,\n//                     },\n//                 }\n//             );\n//             console.log(\"Response:\", response.data);\n//         } catch (error) {\n//             console.error(\"Error submitting form:\", error);\n//         }\n//     };\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         if (!barcode || !audit_type || !case_error || !case_status) {\n//             setSnackbarOpen(true);\n//             return;\n//         }\n//         if (!validateBarcode(barcode)) {\n//             alert(\"Please fill in the correct barcode.\");\n//             return;\n//         }\n//         handleSaveOrSubmit(e, \"submitted\");\n//         setIsRequiblack(true);\n//     };\n\n//     const handleSave = (e) => {\n//         handleSaveOrSubmit(e, \"draft\");\n//         setIsRequiblack(false);\n//         alert(\"Form Saved Successfully\");\n//     };\n//     const handleCloseSnackbar = () => {\n//         setSnackbarOpen(false);\n//     };\n\n//     const handleInpChange = (e) => {\n//         setBarcode(e.target.value.toUpperCase());\n//         if (!validateBarcode(e.target.value)) {\n//             setError(\"Invalid barcode\");\n//         } else {\n//             setError(\"\");\n//         }\n//     };\n//     const handleAuditChange = (e) => setAuditType(e.target.value);\n//     const handleCaseErrorChange = (e) => setCaseError(e.target.value);\n//     const handleCaseStatusChange = (e) => setCaseStatus(e.target.value);\n\n//     const [componentsWithoutError, setComponentsWithoutError] = useState([]);\n//     const [addNewItem, setAddNewItem] = useState([]);\n\n//     const handleAddNewItem = () => {\n//         setcountforerrorcase(count_for_errorcase + 1);\n//         setAddNewItem([\n//             ...addNewItem,\n//             {\n//                 audit_type: \"\",\n//                 errorDefinition: \"\",\n//                 finalErrorCategory: \"\",\n//                 remarks: \"\",\n//                 remarks_for_operations: \"\",\n//                 file: null,\n//             },\n//         ]);\n//     };\n\n//     const handleInputnewchange = (index, field, value) => {\n//         const updatedItems = addNewItem.map((item, i) =>\n//             i === index ? { ...item, [field]: value } : item\n//         );\n//         setAddNewItem(updatedItems);\n//     };\n\n//     const handleFileChange = async (index, files) => {\n//         const updatedComponents = [...addNewItem];\n\n//         const filesArray = Array.from(files);\n\n//         const base64Files = await Promise.all(\n//             filesArray.map(async (file) => ({\n//                 file: await convertToBase64forcaseerror(file),\n//             }))\n//         );\n\n//         updatedComponents[index][\"file\"] = base64Files;\n\n//         setAddNewItem(updatedComponents);\n//     };\n\n//     const convertToBase64forcaseerror = (file) => {\n//         return new Promise((resolve, reject) => {\n//             const reader = new FileReader();\n//             reader.readAsDataURL(file);\n//             reader.onload = () => resolve(reader.result);\n//             reader.onerror = (error) => reject(error);\n//         });\n//     };\n\n//     const handleRemoveNewItem = (index) => {\n//         setcountforerrorcase(count_for_errorcase - 1);\n//         const updatedItems = addNewItem.filter((_, i) => i !== index);\n//         setAddNewItem(updatedItems);\n//     };\n\n//     const handleComponentsUpdate = (updatedComponents) => {\n//         setComponentsWithoutError(updatedComponents);\n//     };\n\n//     const handleComponentsUpdateforcwe = (updatedComponents) => {\n//         setComponentsWithError(updatedComponents);\n//     };\n\n//     return (\n//         <>\n//             <Box\n//                 sx={{\n//                     width: \"100%\",\n//                     padding: \"50px 0\",\n//                     display: \"flex\",\n//                     justifyContent: \"center\",\n\n//                 }}\n//             >\n//                 <Paper\n//                     elevation={0}\n//                     sx={{\n//                         padding: \"50px 0px\",\n//                         width: \"100%\",\n//                         maxWidth: \"1500px\",\n//                         display: \"flex\",\n//                         gap: \"10px\",\n//                         padding: \"20px\",\n//                         overflow: \"hidden\",\n//                         margin: \"20px\",\n//                     }}\n//                 >\n//                     <Grid sx={{ width: \"100%\" }}>\n//                         <form onSubmit={handleSubmit}>\n//                             <Grid container spacing={3}>\n//                                 <Grid\n//                                     container\n//                                     spacing={2}\n//                                     sx={{ padding: \"40px 22px 0px 22px\", }}\n//                                 >\n//                                     <Grid item xs={12} md={3}>\n//                                         <CustomInputLabel label=\"Type of Audit\" />\n//                                         <CustomFormControl>\n//                                             <CustomSelect\n//                                                 value={audit_type}\n//                                                 onChange={handleAuditChange}\n//                                                 options={audit_type_check}\n//                                             />\n//                                         </CustomFormControl>\n//                                     </Grid>\n//                                     <Grid item xs={12} md={3}>\n//                                         <CustomInputLabel label=\"Barcode\" />\n\n//                                         <CustomFormControl>\n//                                             <CustomTextField\n//                                                 value={barcode}\n//                                                 onChange={handleInpChange}\n//                                                 error={error}\n//                                                 helperText={error}\n//                                                 placeholder=\"Enter your text here\"\n//                                                 minLength={16}\n//                                                 maxLength={16}\n//                                             />\n//                                         </CustomFormControl>\n//                                     </Grid>\n//                                     <Grid item xs={12} md={3}>\n//                                         <CustomInputLabel label=\"Status\" />\n//                                         <CustomFormControl>\n//                                             <CustomSelect\n//                                                 value={case_status}\n//                                                 onChange={handleCaseStatusChange}\n//                                                 options={audit_type_status}\n//                                             />\n//                                         </CustomFormControl>\n//                                     </Grid>\n//                                     <Grid item xs={12} md={3}>\n//                                         <CustomInputLabel label=\"Is there any case error?\" />\n\n//                                         <CustomFormControl>\n//                                             <CustomSelect\n//                                                 value={case_error}\n//                                                 onChange={handleCaseErrorChange}\n//                                                 options={audit_type_is_there_any_case_error}\n//                                             />\n//                                         </CustomFormControl>\n//                                     </Grid>\n//                                 </Grid>\n\n//                                 <Grid item xs={12} sx={{ marginTop: \"20px\" }}>\n//                                     {addNewItem.map((item, index) => (\n//                                         <Grid container key={index}>\n//                                             <Typography\n//                                                 variant=\"h6\"\n//                                                 gutterBottom\n//                                                 sx={{ marginBottom: \"16px\" }}\n//                                             >\n//                                                 Case Error {index + 1}\n//                                             </Typography>\n\n//                                             <Grid container spacing={3}>\n//                                                 <Grid item xs={12} sm={4}>\n//                                                     <CustomInputLabel label=\"Select Category\" />\n//                                                     <CustomFormControl>\n//                                                         <CustomSelect\n//                                                             value={item.select_category}\n//                                                             onChange={(e) => handleInputnewchange(index, 'select_category', e.target.value)}\n//                                                             options={case_select_category}\n//                                                         />\n\n//                                                     </CustomFormControl>\n//                                                 </Grid>\n//                                                 <Grid item xs={12} sm={4}>\n//                                                     <CustomInputLabel label=\"Error Definition\" />\n//                                                     <CustomFormControl>\n//                                                         <CustomSelect\n//                                                             value={item.errorDefinition || ''}\n//                                                             onChange={(e) => handleInputnewchange(index, 'errorDefinition', e.target.value)}\n//                                                             options={case_error_definition}\n//                                                         />\n\n//                                                     </CustomFormControl>\n//                                                 </Grid>\n//                                                 <Grid item xs={12} sm={4}>\n//                                                     <CustomInputLabel label=\"Final Error Category\" />\n//                                                     <CustomFormControl>\n\n//                                                         <CustomSelect\n//                                                             value={item.finalErrorCategory || ''}\n//                                                             onChange={(e) => handleInputnewchange(index, 'finalErrorCategory', e.target.value)}\n//                                                             options={case_final_error_category}\n//                                                         />\n\n//                                                     </CustomFormControl>\n//                                                 </Grid>\n//                                                 <Grid item xs={12} sm={6}>\n//                                                     <CustomInputLabel label=\"Remarks\" />\n//                                                     <CustomFormControl>\n//                                                         <TextField\n//                                                             multiline\n//                                                             rows={4}\n//                                                             value={item.remarks}\n//                                                             onChange={(e) =>\n//                                                                 handleInputnewchange(index, \"remarks\", e.target.value)\n//                                                             }\n//                                                             fullWidth\n//                                                             sx={{\n//                                                                 \"& .MuiOutlinedInput-root\": {\n//                                                                     \"& fieldset\": {\n//                                                                         borderColor: \"black\", // Set the border color to black\n//                                                                     },\n//                                                                     \"&:hover fieldset\": {\n//                                                                         borderColor: \"black\", // Set border color on hover\n//                                                                     },\n//                                                                     \"&.Mui-focused fieldset\": {\n//                                                                         borderColor: \"black\", // Set border color when focused\n//                                                                     },\n//                                                                 },\n//                                                                 \"& .MuiInputBase-input\": {\n//                                                                     color: \"black\", // Set the text color to black\n//                                                                 },\n//                                                             }}\n//                                                         />\n//                                                     </CustomFormControl>\n//                                                 </Grid>\n//                                                 <Grid item xs={12} sm={6}>\n//                                                     <CustomInputLabel label=\"Remarks for Operations\" />\n//                                                     <CustomFormControl>\n//                                                         <TextField\n//                                                             multiline\n//                                                             rows={4}\n//                                                             value={item.remarks_for_operations}\n//                                                             onChange={(e) =>\n//                                                                 handleInputnewchange(index, \"remarks_for_operations\", e.target.value)\n//                                                             }\n//                                                             fullWidth\n//                                                             sx={{\n//                                                                 \"& .MuiOutlinedInput-root\": {\n//                                                                     \"& fieldset\": {\n//                                                                         borderColor: \"black\", // Set the border color to black\n//                                                                     },\n//                                                                     \"&:hover fieldset\": {\n//                                                                         borderColor: \"black\", // Set border color on hover\n//                                                                     },\n//                                                                     \"&.Mui-focused fieldset\": {\n//                                                                         borderColor: \"black\", // Set border color when focused\n//                                                                     },\n//                                                                 },\n//                                                                 \"& .MuiInputBase-input\": {\n//                                                                     color: \"black\", // Set the text color to black\n//                                                                 },\n//                                                             }}\n//                                                         />\n//                                                     </CustomFormControl>\n//                                                 </Grid>\n//                                                 <Grid item xs={12} sm={12}>\n//                                                     <CustomFormControl>\n//                                                         <TextField\n//                                                             requiblack\n//                                                             type=\"file\"\n//                                                             inputProps={{ multiple: true }}\n//                                                             onChange={(e) =>\n//                                                                 handleFileChange(index, e.target.files)\n//                                                             }\n//                                                             fullWidth\n//                                                         />\n//                                                     </CustomFormControl>\n//                                                 </Grid>\n\n//                                                 <Grid item xs={12}>\n//                                                     <Grid\n//                                                         container\n//                                                         justifyContent=\"flex-start\"\n//                                                         alignItems=\"center\"\n//                                                         spacing={2}\n//                                                     >\n//                                                         <Grid item>\n//                                                             <CustomButton\n//                                                                 onClick={() => handleRemoveNewItem(index)}\n//                                                                 variant=\"outlined\"\n//                                                                 color=\"error\"\n//                                                                 sx={{\n//                                                                     marginBottom: \"20px\",\n//                                                                     marginRight: \"10px\",\n//                                                                 }}\n//                                                             >\n//                                                                 Remove Item\n//                                                             </CustomButton>\n//                                                         </Grid>\n//                                                         <Grid item>\n//                                                             <CustomButton\n//                                                                 onClick={handleAddNewItem}\n//                                                                 sx={{ marginBottom: \"20px\" }}\n//                                                             >\n//                                                                 Add Item\n//                                                             </CustomButton>\n//                                                         </Grid>\n//                                                     </Grid>\n//                                                 </Grid>\n//                                             </Grid>\n//                                         </Grid>\n//                                     ))}\n//                                 </Grid>\n\n//                                 <Cwe onComponentsUpdatecwe={handleComponentsUpdateforcwe} />\n\n//                                 <Cwithoute onComponentsUpdate={handleComponentsUpdate} />\n//                                 <Grid\n//                                     container\n//                                     item\n//                                     xs={12}\n//                                     spacing={2}\n//                                     sx={{ display: \"flex\" }}\n//                                 >\n//                                     <Grid item>\n//                                         {\" \"}\n//                                         <CustomButton type=\"submit\">Submit</CustomButton>\n//                                     </Grid>\n//                                     <Grid item>\n//                                         {\" \"}\n//                                         <CustomButton onClick={handleSave}>Save</CustomButton>\n//                                     </Grid>\n//                                 </Grid>\n\n//                                 <Snackbar\n//                                     open={snackbarOpen}\n//                                     autoHideDuration={6000}\n//                                     onClose={handleCloseSnackbar}\n//                                     anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n//                                 >\n//                                     <Alert\n//                                         onClose={handleCloseSnackbar}\n//                                         severity=\"error\"\n//                                         sx={{ width: \"100%\", maxWidth: 400 }}\n//                                     >\n//                                         All fields are requiblack!\n//                                     </Alert>\n//                                 </Snackbar>\n//                             </Grid>\n//                         </form>\n//                     </Grid>\n//                 </Paper>\n//             </Box>\n//         </>\n//     );\n// };\n\n// export default Landing;\n\n// first code ends here\n\n//second code start her\n\nimport CustomButton from \"../CustomButton\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Box, Paper, Snackbar, Alert, Divider } from \"@mui/material\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport InfoIcon from '@mui/icons-material/Info';\nimport ContactMailIcon from '@mui/icons-material/ContactMail';\nimport { audit_type_check, audit_type_status, audit_type_is_there_any_case_error, case_select_category, case_error_definition, case_final_error_category } from \"./options\";\nimport Cwe from \"./Cwe\";\nimport Cwithoute from \"./Cwithoute\";\nimport CustomInputLabel from \"./CustomInputLabel\";\nimport CustomFormControl from \"./CustomFormControl\";\nimport CustomSelect from \"./CustomSelect\";\nimport CustomTextField from \"./CustomTextField\";\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Landing = () => {\n  _s();\n  const [barcode, setBarcode] = useState(\"\");\n  const [audit_type, setAuditType] = useState(\"\");\n  const [case_error, setCaseError] = useState(\"\");\n  const [case_status, setCaseStatus] = useState(\"\");\n  const [componentsWithError, setComponentsWithError] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [fieldErrors, setFieldErrors] = useState([]);\n  const [isRequiblack, setIsRequiblack] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [select_category, selectCategory] = useState(\"\");\n  const [sub_barcode, setSubbarcode] = useState(\"\");\n  const [check_status, setCheckStatus] = useState(\"\");\n  const [change_status, setChangeStatus] = useState(\"\");\n  const [error_definition, setErrorDefinition] = useState(\"\");\n  const [count_for_cwe, setcountforcwe] = useState(0);\n  const check_counter_for_cwe_string = count_for_cwe.toString();\n  const [count_for_cwithoute, setcountforcwithoute] = useState(0);\n  const check_counter_for_cwithoute_string = count_for_cwithoute.toString();\n  const [count_for_errorcase, setcountforerrorcase] = useState(0);\n  const check_counter_for_errorcase_string = count_for_errorcase.toString();\n  useEffect(() => {\n    if (case_error === \"yes\" && addNewItem.length === 0) {\n      handleAddNewItem();\n    } else if (case_error === \"no\" || case_error === \"incomplete\") {\n      setAddNewItem([]);\n    }\n  }, [case_error]);\n  const validateBarcode = barcode => {\n    const partialBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}$/;\n    if (partialBarcodeRegex.test(barcode)) {\n      return true;\n    }\n    return false;\n  };\n  const accessToken = Cookies.get(\"access_token\");\n  const handleSaveOrSubmit = async (e, status) => {\n    e.preventDefault();\n    const formData = {\n      barcode,\n      audit_type,\n      case_error,\n      case_status,\n      status: status,\n      created_at: new Date().toISOString().split(\"T\")[0],\n      error_cases: (addNewItem || []).map(item => ({\n        select_category: item.select_category,\n        error_definition: item.errorDefinition,\n        final_error_category: item.finalErrorCategory,\n        remarks: item.remarks,\n        remarks_for_operations: item.remarks_for_operations,\n        files: (item.file || []).map(f => ({\n          file: f.file\n        })),\n        counter1: check_counter_for_errorcase_string\n      })),\n      componentsWithError: (componentsWithError || []).map(component => ({\n        select_category: component.select_category,\n        sub_barcode: component.sub_barcode,\n        change_status: component.change_status,\n        check_status: component.check_status,\n        remarks: component.remarks,\n        error_definition: component.error_definition,\n        remarks_for_operations: component.remarks_for_operations,\n        files: (component.file || []).map(f => ({\n          file: f.file\n        })),\n        counter2: check_counter_for_cwe_string\n      })),\n      componentsWithoutError: (componentsWithoutError || []).map(component => ({\n        sub_barcode: component.sub_barcode,\n        remarks: component.remarks,\n        remarks_for_operations: component.remarks_for_operations,\n        counter3: check_counter_for_cwithoute_string,\n        check_status: component.check_status,\n        change_status: component.change_status\n      }))\n    };\n    localStorage.setItem(\"formData\", JSON.stringify(formData));\n    console.log({\n      formData\n    });\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/audit/\", formData, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      console.log(\"Response:\", response.data);\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!barcode || !audit_type || !case_error || !case_status) {\n      setSnackbarOpen(true);\n      return;\n    }\n    if (!validateBarcode(barcode)) {\n      alert(\"Please fill in the correct barcode.\");\n      return;\n    }\n    handleSaveOrSubmit(e, \"submitted\");\n    setIsRequiblack(true);\n  };\n  const handleSave = e => {\n    handleSaveOrSubmit(e, \"draft\");\n    setIsRequiblack(false);\n    alert(\"Form Saved Successfully\");\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbarOpen(false);\n  };\n  const handleInpChange = e => {\n    setBarcode(e.target.value.toUpperCase());\n    if (!validateBarcode(e.target.value)) {\n      setError(\"Invalid barcode\");\n    } else {\n      setError(\"\");\n    }\n  };\n  const handleAuditChange = e => setAuditType(e.target.value);\n  const handleCaseErrorChange = e => setCaseError(e.target.value);\n  const handleCaseStatusChange = e => setCaseStatus(e.target.value);\n  const [componentsWithoutError, setComponentsWithoutError] = useState([]);\n  const [addNewItem, setAddNewItem] = useState([]);\n  const handleAddNewItem = () => {\n    setcountforerrorcase(count_for_errorcase + 1);\n    setAddNewItem([...addNewItem, {\n      select_category: \"\",\n      errorDefinition: \"\",\n      finalErrorCategory: \"\",\n      remarks: \"\",\n      remarks_for_operations: \"\",\n      file: null\n    }]);\n  };\n  const handleInputnewchange = (index, field, value) => {\n    const updatedItems = addNewItem.map((item, i) => i === index ? {\n      ...item,\n      [field]: value\n    } : item);\n    setAddNewItem(updatedItems);\n  };\n  const handleFileChange = async (index, files) => {\n    const updatedComponents = [...addNewItem];\n    const filesArray = Array.from(files);\n    const base64Files = await Promise.all(filesArray.map(async file => ({\n      file: await convertToBase64forcaseerror(file)\n    })));\n    updatedComponents[index][\"file\"] = base64Files;\n    setAddNewItem(updatedComponents);\n  };\n  const convertToBase64forcaseerror = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  };\n  const handleRemoveNewItem = index => {\n    setcountforerrorcase(count_for_errorcase - 1);\n    const updatedItems = addNewItem.filter((_, i) => i !== index);\n    setAddNewItem(updatedItems);\n  };\n  const handleComponentsUpdate = updatedComponents => {\n    setComponentsWithoutError(updatedComponents);\n  };\n  const handleComponentsUpdateforcwe = updatedComponents => {\n    setComponentsWithError(updatedComponents);\n  };\n  return (\n    /*#__PURE__*/\n    //         <>\n    //     <Box\n    //         sx={{\n    //             width: \"100%\",\n    //             padding: \"40px 0\",\n    //             display: \"flex\",\n    //             justifyContent: \"center\",\n    //             backgroundColor: \"#f5f5f5\",\n    //         }}\n    //     >\n    //         <Paper\n    //             elevation={1}\n    //             sx={{\n    //                 padding: \"20px\",\n    //                 width: \"100%\",\n    //                 maxWidth: \"1400px\",\n    //                 display: \"flex\",\n    //                 gap: \"20px\",\n    //                 overflow: \"hidden\",\n    //                 borderRadius: \"8px\",\n    //                 boxShadow: \"0px 4px 8px rgba(0, 0, 0, 0.1)\",\n    //                 margin: \"20px\",\n    //                 backgroundColor: \"#ffffff\",\n    //             }}\n    //         >\n    //             {/* Sidebar Section */}\n    //         <Box\n    //             sx={{\n    //                 width: { xs: '100%', sm: '25%' },\n    //                 padding: '20px',\n    //                 borderRight: '1px solid #ddd',\n    //                 backgroundColor: '#f5f5f5',\n    //                 borderRadius: '8px',\n    //                 boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',\n    //                 display: 'flex',\n    //                 flexDirection: 'column',\n    //                 gap: '20px',\n    //                 height: '100vh',\n    //                 overflowY: 'auto',\n    //             }}\n    //         >\n    //             <Typography variant=\"h6\" gutterBottom>\n    //               Data Flow\n    //             </Typography>\n    //             <Divider sx={{ marginBottom: '10px' }} />\n    //             <Link to=\"/home\" style={{ textDecoration: 'none' }}>\n    //                 <Box\n    //                     sx={{\n    //                         display: 'flex',\n    //                         alignItems: 'center',\n    //                         padding: '10px',\n    //                         borderRadius: '4px',\n    //                         transition: 'background-color 0.3s',\n    //                         '&:hover': {\n    //                             backgroundColor: '#e0e0e0',\n    //                         },\n    //                     }}\n    //                 >\n    //                     <HomeIcon sx={{ marginRight: '10px', color: 'black' }} />\n    //                     <Typography variant=\"body1\" sx={{ color: 'black' }}>\n    //                         Home\n    //                     </Typography>\n    //                 </Box>\n    //             </Link>\n    //             <Link to=\"/about\" style={{ textDecoration: 'none' }}>\n    //                 <Box\n    //                     sx={{\n    //                         display: 'flex',\n    //                         alignItems: 'center',\n    //                         padding: '10px',\n    //                         borderRadius: '4px',\n    //                         transition: 'background-color 0.3s',\n    //                         '&:hover': {\n    //                             backgroundColor: '#e0e0e0',\n    //                         },\n    //                     }}\n    //                 >\n    //                     <InfoIcon sx={{ marginRight: '10px', color: 'black' }} />\n    //                     <Typography variant=\"body1\" sx={{ color: 'black' }}>\n    //                         About\n    //                     </Typography>\n    //                 </Box>\n    //             </Link>\n    //             <Link to=\"/contact\" style={{ textDecoration: 'none' }}>\n    //                 <Box\n    //                     sx={{\n    //                         display: 'flex',\n    //                         alignItems: 'center',\n    //                         padding: '10px',\n    //                         borderRadius: '4px',\n    //                         transition: 'background-color 0.3s',\n    //                         '&:hover': {\n    //                             backgroundColor: '#e0e0e0',\n    //                         },\n    //                     }}\n    //                 >\n    //                     <ContactMailIcon sx={{ marginRight: '10px', color: 'black' }} />\n    //                     <Typography variant=\"body1\" sx={{ color: 'black' }}>\n    //                         Contact\n    //                     </Typography>\n    //                 </Box>\n    //             </Link>\n    //         </Box>\n    //             {/* Main Form Section */}\n    //             <Box sx={{ width: \"75%\" }}>\n    //                 <Typography variant=\"h5\" gutterBottom>\n    //                     Audit Form\n    //                 </Typography>\n    //                 <form onSubmit={handleSubmit}>\n    //                     <Grid container spacing={4}>\n    //                         <Grid item xs={12} md={3}>\n    //                             <CustomInputLabel label=\"Type of Audit\" />\n    //                             <CustomFormControl>\n    //                                 <CustomSelect\n    //                                     value={audit_type}\n    //                                     onChange={handleAuditChange}\n    //                                     options={audit_type_check}\n    //                                 />\n    //                             </CustomFormControl>\n    //                         </Grid>\n    //                         <Grid item xs={12} md={3}>\n    //                             <CustomInputLabel label=\"Barcode\" />\n    //                             <CustomFormControl>\n    //                                 <CustomTextField\n    //                                     value={barcode}\n    //                                     onChange={handleInpChange}\n    //                                     error={Boolean(error)}\n    //                                     helperText={error}\n    //                                     placeholder=\"Enter your text here\"\n    //                                     inputProps={{ maxLength: 16 }}\n    //                                 />\n    //                             </CustomFormControl>\n    //                         </Grid>\n    //                         <Grid item xs={12} md={3}>\n    //                             <CustomInputLabel label=\"Status\" />\n    //                             <CustomFormControl>\n    //                                 <CustomSelect\n    //                                     value={case_status}\n    //                                     onChange={handleCaseStatusChange}\n    //                                     options={audit_type_status}\n    //                                 />\n    //                             </CustomFormControl>\n    //                         </Grid>\n    //                         <Grid item xs={12} md={3}>\n    //                             <CustomInputLabel label=\"Is there any case error?\" />\n    //                             <CustomFormControl>\n    //                                 <CustomSelect\n    //                                     value={case_error}\n    //                                     onChange={handleCaseErrorChange}\n    //                                     options={audit_type_is_there_any_case_error}\n    //                                 />\n    //                             </CustomFormControl>\n    //                         </Grid>\n    //                     </Grid>\n    //                     {/* Case Error Items */}\n    //                     <Grid container spacing={4} sx={{ marginTop: \"20px\" }}>\n    //                         {addNewItem.map((item, index) => (\n    //                             <Grid item xs={12} key={index}>\n    //                                 <Box\n    //                                     sx={{\n    //                                         border: \"1px solid #ddd\",\n    //                                         borderRadius: \"8px\",\n    //                                         padding: \"16px\",\n    //                                         backgroundColor: \"#fafafa\",\n    //                                         marginBottom: \"20px\",\n    //                                     }}\n    //                                 >\n    //                                     <Typography variant=\"h6\" gutterBottom>\n    //                                         Case Error {index + 1}\n    //                                     </Typography>\n    //                                     <Grid container spacing={4}>\n    //                                         <Grid item xs={12} sm={4}>\n    //                                             <CustomInputLabel label=\"Select Category\" />\n    //                                             <CustomFormControl>\n    //                                                 <CustomSelect\n    //                                                     value={item.select_category}\n    //                                                     onChange={(e) => handleInputnewchange(index, 'select_category', e.target.value)}\n    //                                                     options={case_select_category}\n    //                                                 />\n    //                                             </CustomFormControl>\n    //                                         </Grid>\n    //                                         <Grid item xs={12} sm={4}>\n    //                                             <CustomInputLabel label=\"Error Definition\" />\n    //                                             <CustomFormControl>\n    //                                                 <CustomSelect\n    //                                                     value={item.errorDefinition || ''}\n    //                                                     onChange={(e) => handleInputnewchange(index, 'errorDefinition', e.target.value)}\n    //                                                     options={case_error_definition}\n    //                                                 />\n    //                                             </CustomFormControl>\n    //                                         </Grid>\n    //                                         <Grid item xs={12} sm={4}>\n    //                                             <CustomInputLabel label=\"Final Error Category\" />\n    //                                             <CustomFormControl>\n    //                                                 <CustomSelect\n    //                                                     value={item.finalErrorCategory || ''}\n    //                                                     onChange={(e) => handleInputnewchange(index, 'finalErrorCategory', e.target.value)}\n    //                                                     options={case_final_error_category}\n    //                                                 />\n    //                                             </CustomFormControl>\n    //                                         </Grid>\n    //                                         <Grid item xs={12} sm={6}>\n    //                                             <CustomInputLabel label=\"Remarks\" />\n    //                                             <CustomFormControl>\n    //                                                 <CKEditor\n    //                                                     editor={ClassicEditor}\n    //                                                     data={item.remarks}\n    //                                                     onChange={(event, editor) => {\n    //                                                         const data = editor.getData();\n    //                                                         handleInputnewchange(index, \"remarks\", data);\n    //                                                     }}\n    //                                                 />\n    //                                             </CustomFormControl>\n    //                                         </Grid>\n    //                                         <Grid item xs={12} sm={6}>\n    //                                             <CustomInputLabel label=\"Remarks for Operations\" />\n    //                                             <CustomFormControl>\n    //                                                 <CKEditor\n    //                                                     editor={ClassicEditor}\n    //                                                     data={item.remarks_for_operations}\n    //                                                     onChange={(event, editor) => {\n    //                                                         const data = editor.getData();\n    //                                                         handleInputnewchange(index, \"remarks_for_operations\", data);\n    //                                                     }}\n    //                                                 />\n    //                                             </CustomFormControl>\n    //                                         </Grid>\n    //                                         <Grid item xs={12}>\n    //                                             <CustomFormControl>\n    //                                                 <input\n    //                                                     type=\"file\"\n    //                                                     multiple\n    //                                                     onChange={(e) => handleFileChange(index, e.target.files)}\n    //                                                     style={{ width: \"100%\", border: \"1px solid #ddd\", padding: \"8px\", borderRadius: \"4px\" }}\n    //                                                 />\n    //                                             </CustomFormControl>\n    //                                         </Grid>\n    //                                         <Grid item xs={12}>\n    //                                             <Grid container spacing={2} alignItems=\"center\">\n    //                                                 <Grid item>\n    //                                                     <CustomButton\n    //                                                         onClick={() => handleRemoveNewItem(index)}\n    //                                                         variant=\"outlined\"\n    //                                                         color=\"error\"\n    //                                                         sx={{ marginBottom: \"20px\", marginRight: \"10px\" }}\n    //                                                     >\n    //                                                         Remove Item\n    //                                                     </CustomButton>\n    //                                                 </Grid>\n    //                                                 <Grid item>\n    //                                                     <CustomButton\n    //                                                         onClick={handleAddNewItem}\n    //                                                         sx={{ marginBottom: \"20px\" }}\n    //                                                     >\n    //                                                         Add Item\n    //                                                     </CustomButton>\n    //                                                 </Grid>\n    //                                             </Grid>\n    //                                         </Grid>\n    //                                     </Grid>\n    //                                 </Box>\n    //                             </Grid>\n    //                         ))}\n    //                     </Grid>\n    //                     {/* Additional Components */}\n    //                     <Cwe onComponentsUpdatecwe={handleComponentsUpdateforcwe} />\n    //                     <Cwithoute onComponentsUpdate={handleComponentsUpdate} />\n    //                     {/* Submit and Save Buttons */}\n    //                     <Grid container spacing={2} sx={{ marginTop: \"20px\" }}>\n    //                         <Grid item>\n    //                             <CustomButton type=\"submit\" variant=\"contained\" color=\"primary\">\n    //                                 Submit\n    //                             </CustomButton>\n    //                         </Grid>\n    //                         <Grid item>\n    //                             <CustomButton onClick={handleSave} variant=\"contained\" color=\"secondary\">\n    //                                 Save\n    //                             </CustomButton>\n    //                         </Grid>\n    //                     </Grid>\n    //                     {/* Snackbar for Errors */}\n    //                     <Snackbar\n    //                         open={snackbarOpen}\n    //                         autoHideDuration={6000}\n    //                         onClose={handleCloseSnackbar}\n    //                         anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n    //                     >\n    //                         <Alert\n    //                             onClose={handleCloseSnackbar}\n    //                             severity=\"error\"\n    //                             sx={{ width: \"100%\", maxWidth: 400 }}\n    //                         >\n    //                             All fields are required!\n    //                         </Alert>\n    //                     </Snackbar>\n    //                 </form>\n    //             </Box>\n    //         </Paper>\n    //     </Box>\n    // </>\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: \"100%\",\n          padding: \"40px 0\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          backgroundColor: \"#f5f5f5\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 1,\n          sx: {\n            padding: \"20px\",\n            width: \"100%\",\n            maxWidth: \"1400px\",\n            display: \"flex\",\n            gap: \"20px\",\n            overflow: \"hidden\",\n            borderRadius: \"8px\",\n            boxShadow: \"0px 4px 8px rgba(0, 0, 0, 0.1)\",\n            margin: \"20px\",\n            backgroundColor: \"#ffffff\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: {\n                xs: '100%',\n                sm: '25%'\n              },\n              padding: '20px',\n              borderRight: '1px solid #ddd',\n              backgroundColor: '#f5f5f5',\n              borderRadius: '8px',\n              boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '20px',\n              height: '100vh',\n              overflowY: 'auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Data Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2065,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              sx: {\n                marginBottom: '10px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2068,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/home\",\n              style: {\n                textDecoration: 'none'\n              },\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  padding: '10px',\n                  borderRadius: '4px',\n                  transition: 'background-color 0.3s',\n                  '&:hover': {\n                    backgroundColor: '#e0e0e0'\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(HomeIcon, {\n                  sx: {\n                    marginRight: '10px',\n                    color: 'black'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2082,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  sx: {\n                    color: 'black'\n                  },\n                  children: \"Home\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2083,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2070,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2069,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/about\",\n              style: {\n                textDecoration: 'none'\n              },\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  padding: '10px',\n                  borderRadius: '4px',\n                  transition: 'background-color 0.3s',\n                  '&:hover': {\n                    backgroundColor: '#e0e0e0'\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n                  sx: {\n                    marginRight: '10px',\n                    color: 'black'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2101,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  sx: {\n                    color: 'black'\n                  },\n                  children: \"About\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2102,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2089,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2088,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/contact\",\n              style: {\n                textDecoration: 'none'\n              },\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  padding: '10px',\n                  borderRadius: '4px',\n                  transition: 'background-color 0.3s',\n                  '&:hover': {\n                    backgroundColor: '#e0e0e0'\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(ContactMailIcon, {\n                  sx: {\n                    marginRight: '10px',\n                    color: 'black'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2120,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  sx: {\n                    color: 'black'\n                  },\n                  children: \"Contact\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2121,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2108,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2107,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2050,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: \"75%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: \"Audit Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 4,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  md: 3,\n                  children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                    label: \"Type of Audit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2137,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                    children: /*#__PURE__*/_jsxDEV(CustomSelect, {\n                      value: audit_type,\n                      onChange: handleAuditChange,\n                      options: audit_type_check\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2139,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2138,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2136,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  md: 3,\n                  children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                    label: \"Barcode\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2147,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                    children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n                      value: barcode,\n                      onChange: handleInpChange,\n                      error: Boolean(error),\n                      helperText: error,\n                      placeholder: \"Enter your text here\",\n                      inputProps: {\n                        maxLength: 16\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2149,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2148,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2146,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  md: 3,\n                  children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                    label: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2160,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                    children: /*#__PURE__*/_jsxDEV(CustomSelect, {\n                      value: case_status,\n                      onChange: handleCaseStatusChange,\n                      options: audit_type_status\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2162,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2161,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2159,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  md: 3,\n                  children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                    label: \"Is there any case error?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2170,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                    children: /*#__PURE__*/_jsxDEV(CustomSelect, {\n                      value: case_error,\n                      onChange: handleCaseErrorChange,\n                      options: audit_type_is_there_any_case_error\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2172,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2171,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2169,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2135,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 4,\n                sx: {\n                  marginTop: \"20px\"\n                },\n                children: addNewItem.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      border: \"1px solid #ddd\",\n                      borderRadius: \"8px\",\n                      padding: \"16px\",\n                      backgroundColor: \"#fafafa\",\n                      marginBottom: \"20px\"\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h6\",\n                      gutterBottom: true,\n                      children: [\"Case Error \", index + 1]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2194,\n                      columnNumber: 37\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      container: true,\n                      spacing: 4,\n                      children: [/*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        sm: 4,\n                        children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                          label: \"Select Category\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2199,\n                          columnNumber: 45\n                        }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                          children: /*#__PURE__*/_jsxDEV(CustomSelect, {\n                            value: item.select_category,\n                            onChange: e => handleInputnewchange(index, 'select_category', e.target.value),\n                            options: case_select_category\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2201,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2200,\n                          columnNumber: 45\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2198,\n                        columnNumber: 41\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        sm: 4,\n                        children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                          label: \"Error Definition\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2209,\n                          columnNumber: 45\n                        }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                          children: /*#__PURE__*/_jsxDEV(CustomSelect, {\n                            value: item.errorDefinition || '',\n                            onChange: e => handleInputnewchange(index, 'errorDefinition', e.target.value),\n                            options: case_error_definition\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2211,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2210,\n                          columnNumber: 45\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2208,\n                        columnNumber: 41\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        sm: 4,\n                        children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                          label: \"Final Error Category\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2219,\n                          columnNumber: 45\n                        }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                          children: /*#__PURE__*/_jsxDEV(CustomSelect, {\n                            value: item.finalErrorCategory || '',\n                            onChange: e => handleInputnewchange(index, 'finalErrorCategory', e.target.value),\n                            options: case_final_error_category\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2221,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2220,\n                          columnNumber: 45\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2218,\n                        columnNumber: 41\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        sm: 6,\n                        children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                          label: \"Remarks\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2229,\n                          columnNumber: 45\n                        }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                          children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n                            value: item.remarks,\n                            onChange: e => handleInputnewchange(index, \"remarks\", e.target.value),\n                            multiline: true,\n                            rows: 4,\n                            placeholder: \"Enter remarks here\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2231,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2230,\n                          columnNumber: 45\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2228,\n                        columnNumber: 41\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        sm: 6,\n                        children: [/*#__PURE__*/_jsxDEV(CustomInputLabel, {\n                          label: \"Remarks for Operations\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2241,\n                          columnNumber: 45\n                        }, this), /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                          children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n                            value: item.remarks_for_operations,\n                            onChange: e => handleInputnewchange(index, \"remarks_for_operations\", e.target.value),\n                            multiline: true,\n                            rows: 4,\n                            placeholder: \"Enter remarks for operations here\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2243,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2242,\n                          columnNumber: 45\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2240,\n                        columnNumber: 41\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsxDEV(CustomFormControl, {\n                          children: /*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"file\",\n                            multiple: true,\n                            onChange: e => handleFileChange(index, e.target.files),\n                            style: {\n                              width: \"100%\",\n                              border: \"1px solid #ddd\",\n                              padding: \"8px\",\n                              borderRadius: \"4px\"\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2254,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2253,\n                          columnNumber: 45\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2252,\n                        columnNumber: 41\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsxDEV(Grid, {\n                          container: true,\n                          spacing: 2,\n                          alignItems: \"center\",\n                          children: [/*#__PURE__*/_jsxDEV(Grid, {\n                            item: true,\n                            children: /*#__PURE__*/_jsxDEV(CustomButton, {\n                              onClick: () => handleRemoveNewItem(index),\n                              variant: \"outlined\",\n                              color: \"error\",\n                              sx: {\n                                marginBottom: \"20px\",\n                                marginRight: \"10px\"\n                              },\n                              children: \"Remove Item\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2265,\n                              columnNumber: 53\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2264,\n                            columnNumber: 49\n                          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                            item: true,\n                            children: /*#__PURE__*/_jsxDEV(CustomButton, {\n                              onClick: handleAddNewItem,\n                              sx: {\n                                marginBottom: \"20px\"\n                              },\n                              children: \"Add Item\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2275,\n                              columnNumber: 53\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2274,\n                            columnNumber: 49\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2263,\n                          columnNumber: 45\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2262,\n                        columnNumber: 41\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2197,\n                      columnNumber: 37\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2185,\n                    columnNumber: 33\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2184,\n                  columnNumber: 29\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2182,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Cwe, {\n                onComponentsUpdatecwe: handleComponentsUpdate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2291,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Cwithoute, {\n                onComponentsUpdate: handleComponentsUpdateforcwe\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2292,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                justifyContent: \"flex-end\",\n                sx: {\n                  marginTop: \"20px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(CustomButton, {\n                    type: \"submit\",\n                    variant: \"contained\",\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2297,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2296,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2295,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2129,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2034,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2025,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  );\n};\n_s(Landing, \"DenITh+w0CSA4ex1JL9WxAZmmh0=\");\n_c = Landing;\nexport default Landing;\nvar _c;\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"names":["CustomButton","React","useState","useEffect","Grid","Typography","Box","Paper","Snackbar","Alert","Divider","axios","Cookies","HomeIcon","InfoIcon","ContactMailIcon","audit_type_check","audit_type_status","audit_type_is_there_any_case_error","case_select_category","case_error_definition","case_final_error_category","Cwe","Cwithoute","CustomInputLabel","CustomFormControl","CustomSelect","CustomTextField","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Landing","_s","barcode","setBarcode","audit_type","setAuditType","case_error","setCaseError","case_status","setCaseStatus","componentsWithError","setComponentsWithError","error","setError","fieldErrors","setFieldErrors","isRequiblack","setIsRequiblack","snackbarOpen","setSnackbarOpen","select_category","selectCategory","sub_barcode","setSubbarcode","check_status","setCheckStatus","change_status","setChangeStatus","error_definition","setErrorDefinition","count_for_cwe","setcountforcwe","check_counter_for_cwe_string","toString","count_for_cwithoute","setcountforcwithoute","check_counter_for_cwithoute_string","count_for_errorcase","setcountforerrorcase","check_counter_for_errorcase_string","addNewItem","length","handleAddNewItem","setAddNewItem","validateBarcode","partialBarcodeRegex","test","accessToken","get","handleSaveOrSubmit","e","status","preventDefault","formData","created_at","Date","toISOString","split","error_cases","map","item","errorDefinition","final_error_category","finalErrorCategory","remarks","remarks_for_operations","files","file","f","counter1","component","counter2","componentsWithoutError","counter3","localStorage","setItem","JSON","stringify","console","log","response","post","headers","Authorization","data","handleSubmit","alert","handleSave","handleCloseSnackbar","handleInpChange","target","value","toUpperCase","handleAuditChange","handleCaseErrorChange","handleCaseStatusChange","setComponentsWithoutError","handleInputnewchange","index","field","updatedItems","i","handleFileChange","updatedComponents","filesArray","Array","from","base64Files","Promise","all","convertToBase64forcaseerror","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","handleRemoveNewItem","filter","_","handleComponentsUpdate","handleComponentsUpdateforcwe","children","sx","width","padding","display","justifyContent","backgroundColor","elevation","maxWidth","gap","overflow","borderRadius","boxShadow","margin","xs","sm","borderRight","flexDirection","height","overflowY","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","to","style","textDecoration","alignItems","transition","marginRight","color","onSubmit","container","spacing","md","label","onChange","options","Boolean","helperText","placeholder","inputProps","maxLength","marginTop","border","multiline","rows","type","multiple","onClick","onComponentsUpdatecwe","onComponentsUpdate","_c","$RefreshReg$"],"sources":["C:/Users/sameergupta_dataflow/Desktop/X-AuditV2/frontend/src/components/Landing.jsx"],"sourcesContent":["// import CustomButton from '../CustomButton';\r\n// import React, { useState, useEffect } from 'react';\r\n// // import Header from '../Header';\r\n// import { FormControl, InputLabel, MenuItem, Select, Typography, TextField, Grid, Box, Paper, Snackbar, Alert } from '@mui/material';\r\n// import axios from 'axios';\r\n// import '../css/styles.css';\r\n// // import { useNavigate } from 'react-router-dom';\r\n// import Cookies from 'js-cookie'\r\n// import {\r\n//     audit_type_check, audit_type_status, audit_type_is_there_any_case_error, case_select_category, case_error_definition\r\n//     , case_final_error_category\r\n//     , cwe_check_status,\r\n//     cwithoute_check_status, cwithoute_change_status, cwe_error_definition, cwe_select_category, cwe_change_status\r\n// } from './options';\r\n\r\n\r\n\r\n// const Landing = () => {\r\n//     const [barcode, setBarcode] = useState('');\r\n//     const [audit_type, setAuditType] = useState('');\r\n//     const [case_error, setCaseError] = useState('');\r\n//     const [case_status, setCaseStatus] = useState('');\r\n//     const [componentsWithError, setComponentsWithError] = useState([]);\r\n//     const [error, setError] = useState(''); \r\n//     const [errors, setErrors] = useState([]);\r\n//     const [fieldErrors, setFieldErrors] = useState([]);\r\n//     const [isRequired, setIsRequired] = useState(false);\r\n//     const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n//     const [select_category, selectCategory] = useState('')\r\n//     const [sub_barcode, setSubbarcode] = useState('')\r\n//     const [check_status, setCheckStatus] = useState('')\r\n//     const [change_status, setChangeStatus] = useState('')\r\n//     const [error_definition, setErrorDefinition] = useState('')\r\n\r\n//     const [count_for_cwe, setcountforcwe] = useState(0);\r\n//     const check_counter_for_cwe_string = count_for_cwe.toString();\r\n\r\n//     const [count_for_cwithoute, setcountforcwithoute] = useState(0);\r\n//     const check_counter_for_cwithoute_string = count_for_cwithoute.toString();\r\n\r\n\r\n//     const [count_for_errorcase, setcountforerrorcase] = useState(0);\r\n\r\n//     const check_counter_for_errorcase_string = count_for_errorcase.toString();\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     const validateSubBarcodeForCwithoutError = (sub_barcode, index) => {\r\n//         // Combined regex for sub bar code and barcode\r\n//         const subBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}(-[A-Z]{2}\\d{2})?$/;\r\n\r\n//         // Check if barcode matches the combined pattern\r\n//         const isValid = subBarcodeRegex.test(sub_barcode);\r\n//         const updatedErrors = [...fieldErrors];\r\n//         updatedErrors[index] = isValid ? '' : 'Invalid Subbarcode';\r\n//         setFieldErrors(updatedErrors);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (case_error === 'yes' && addNewItem.length === 0) {\r\n//             handleAddNewItem();\r\n//         } else if (case_error === 'no' || case_error === 'incomplete') {\r\n//             setAddNewItem([]);\r\n//         }\r\n//     }, [case_error]);\r\n\r\n//     const validateBarcode = (barcode) => {\r\n//         // // Regex for sub bar code\r\n//         // const fullBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}-[A-Z]{2}\\d{2}$/;\r\n\r\n//         // Regex for barcode \r\n//         const partialBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}$/;\r\n\r\n//         // Check if barcode matches either pattern\r\n//         if (partialBarcodeRegex.test(barcode)) {\r\n//             return true;\r\n//         }\r\n//         return false;\r\n//     };\r\n\r\n//     const validateSubBarcodeforcwe = (barcode, index) => {\r\n//         // Combined regex for sub bar code and barcode\r\n//         const subBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}(-[A-Z]{2}\\d{2})?$/;\r\n\r\n//         // Check if barcode matches the combined pattern\r\n//         const isValid = subBarcodeRegex.test(barcode);\r\n//         const updatedErrors = [...errors];\r\n//         updatedErrors[index] = isValid ? '' : 'Invalid Subbarcode';\r\n//         setErrors(updatedErrors);\r\n//     };\r\n\r\n\r\n\r\n//     const accessToken = Cookies.get('access_token');\r\n\r\n\r\n//     // const handleSaveOrSubmit = async (e, status) => {\r\n//     //     e.preventDefault();\r\n\r\n//     //     const formData = {\r\n//     //         barcode,\r\n//     //         audit_type,\r\n//     //         case_error,\r\n//     //         case_status,\r\n//     //         status: status,\r\n//     //         created_at: new Date().toISOString().split('T')[0],\r\n//     //         error_cases: addNewItem.map(item => ({\r\n//     //             select_category: item.select_category,\r\n//     //             error_definition: item.errorDefinition,\r\n//     //             final_error_category: item.finalErrorCategory,\r\n//     //             remarks: item.remarks,\r\n//     //             remarks_for_operations: item.remarks_for_operations,\r\n//     //             // files: item.fil ? Array.from(item.file).map(file => ({\r\n//     //             //     name: file.name,\r\n//     //             //     size: file.size,\r\n//     //             //     type: file.type\r\n//     //             // })) : [], \r\n//     //             files: item.file.map(f => ({\r\n//     //                 file: f.file\r\n//     //             })),\r\n//     //             counter1: check_counter_for_errorcase_string\r\n//     //         })),\r\n\r\n//     //         componentsWithError: componentsWithError.map(component => ({\r\n//     //             select_category: component.select_category,\r\n//     //             sub_barcode: component.sub_barcode,\r\n//     //             change_status: component.change_status,\r\n//     //             check_status: component.check_status,\r\n//     //             remarks: component.remarks,\r\n//     //             error_definition: component.error_definition,\r\n//     //             remarks_for_operations: component.remarks_for_operations,\r\n//     //             // files: component.file ? Array.from(component.file).map(file => ({\r\n//     //             //     name: file.name,\r\n//     //             //     size: file.size,\r\n//     //             //     type: file.type\r\n//     //             // })) : [], \r\n//     //             files: component.file.map(f => ({\r\n//     //                 file: f.file\r\n//     //             })),\r\n//     //             counter2: check_counter_for_cwe_string\r\n//     //         })),\r\n\r\n//     //         componentsWithoutError: componentsWithoutError.map(component => ({\r\n//     //             sub_barcode: component.sub_barcode,\r\n\r\n//     //             remarks: component.remarks,\r\n//     //             remarks_for_operations: component.remarks_for_operations,\r\n//     //             counter3: check_counter_for_cwithoute_string,\r\n\r\n//     //             check_status: component.check_status,\r\n//     //             change_status: component.change_status,\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     //         })),\r\n//     //     };\r\n\r\n//     //     localStorage.setItem('formData', JSON.stringify(formData));\r\n\r\n//     //     console.log({ formData })\r\n\r\n\r\n\r\n//     //     try {\r\n//     //         const response = await axios.post('http://127.0.0.1:8000/api/auth/audit/', formData, {\r\n//     //             headers: {\r\n//     //                 'Content-Type': 'application/json',\r\n//     //                 'Authorization': `Bearer ${accessToken}`,\r\n//     //             },\r\n//     //         });\r\n\r\n//     //         console.log('Response:', response.data);\r\n\r\n//     //         //   // Optionally, remove data from localStorage after successful submission\r\n//     //         //   localStorage.removeItem('formData');\r\n//     //     } catch (error) {\r\n//     //         console.error('Error submitting form:', error);\r\n//     //     }\r\n//     // };\r\n\r\n//     const handleSaveOrSubmit = async (e, status) => {\r\n//         e.preventDefault();\r\n    \r\n//         const formData = {\r\n//             barcode,\r\n//             audit_type,\r\n//             case_error,\r\n//             case_status,\r\n//             status: status,\r\n//             created_at: new Date().toISOString().split('T')[0],\r\n//             error_cases: (addNewItem || []).map(item => ({\r\n//                 select_category: item.select_category,\r\n//                 error_definition: item.errorDefinition,\r\n//                 final_error_category: item.finalErrorCategory,\r\n//                 remarks: item.remarks,\r\n//                 remarks_for_operations: item.remarks_for_operations,\r\n//                 files: (item.file || []).map(f => ({\r\n//                     file: f.file\r\n//                 })),\r\n//                 counter1: check_counter_for_errorcase_string\r\n//             })),\r\n    \r\n//             componentsWithError: (componentsWithError || []).map(component => ({\r\n//                 select_category: component.select_category,\r\n//                 sub_barcode: component.sub_barcode,\r\n//                 change_status: component.change_status,\r\n//                 check_status: component.check_status,\r\n//                 remarks: component.remarks,\r\n//                 error_definition: component.error_definition,\r\n//                 remarks_for_operations: component.remarks_for_operations,\r\n//                 files: (component.file || []).map(f => ({\r\n//                     file: f.file\r\n//                 })),\r\n//                 counter2: check_counter_for_cwe_string\r\n//             })),\r\n    \r\n//             componentsWithoutError: (componentsWithoutError || []).map(component => ({\r\n//                 sub_barcode: component.sub_barcode,\r\n//                 remarks: component.remarks,\r\n//                 remarks_for_operations: component.remarks_for_operations,\r\n//                 counter3: check_counter_for_cwithoute_string,\r\n//                 check_status: component.check_status,\r\n//                 change_status: component.change_status,\r\n//             })),\r\n//         };\r\n    \r\n//         localStorage.setItem('formData', JSON.stringify(formData));\r\n//         console.log({ formData });\r\n    \r\n//         try {\r\n//             const response = await axios.post('http://127.0.0.1:8000/api/auth/audit/', formData, {\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${accessToken}`,\r\n//                 },\r\n//             });\r\n//             console.log('Response:', response.data);\r\n//         } catch (error) {\r\n//             console.error('Error submitting form:', error);\r\n//         }\r\n//     };\r\n\r\n    \r\n\r\n//     // const handleSubmit = (e) => {\r\n//     //     e.preventDefault(); // Prevent the default form submission behavior\r\n\r\n\r\n//     //     // Check for other required fields\r\n//     //     if (!barcode || !audit_type || !case_error || !case_status) {\r\n//     //         setSnackbarOpen(true);\r\n//     //         return; // Stop the submission process if any required field is missing\r\n//     //     }\r\n\r\n//     //     // Validate barcode\r\n//     //     if (!validateBarcode(barcode)) {\r\n//     //         alert('Please fill in the correct barcode.');\r\n//     //         return; // Stop the submission process if validation fails\r\n//     //     }\r\n\r\n\r\n\r\n\r\n\r\n//     //     // Proceed with save or submit if all validations pass\r\n//     //     handleSaveOrSubmit(e, 'submitted');\r\n//     //     setIsRequired(true);\r\n//     // };\r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault(); // Prevent the default form submission behavior\r\n    \r\n//         // Check for other required fields\r\n//         if (!barcode || !audit_type || !case_error || !case_status) {\r\n//             setSnackbarOpen(true);\r\n//             return; // Stop the submission process if any required field is missing\r\n//         }\r\n    \r\n//         // Validate barcode\r\n//         if (!validateBarcode(barcode)) {\r\n//             alert('Please fill in the correct barcode.');\r\n//             return; // Stop the submission process if validation fails\r\n//         }\r\n    \r\n//         // Proceed with save or submit if all validations pass\r\n//         handleSaveOrSubmit(e, 'submitted');\r\n//         setIsRequired(true);\r\n//     };\r\n\r\n//     // const handleSave = (e) => { handleSaveOrSubmit(e, 'draft'); setIsRequired(false); alert('Form Saved Successfully') };\r\n//     const handleSave = (e) => { \r\n//         handleSaveOrSubmit(e, 'draft'); \r\n//         setIsRequired(false); \r\n//         alert('Form Saved Successfully'); \r\n//     };\r\n//     const handleCloseSnackbar = () => {\r\n//         setSnackbarOpen(false);\r\n//     };\r\n\r\n//     const handleInpChange = (e) => {\r\n//         setBarcode(e.target.value.toUpperCase());\r\n//         if (!validateBarcode(e.target.value)) {\r\n//             setError('Invalid barcode');\r\n//         } else {\r\n//             setError('');\r\n//         }\r\n//     }\r\n//     const handleAuditChange = (e) => setAuditType(e.target.value);\r\n//     const handleCaseErrorChange = (e) => setCaseError(e.target.value);\r\n//     const handleCaseStatusChange = (e) => setCaseStatus(e.target.value);\r\n\r\n\r\n//     // test component without error\r\n//     const [componentsWithoutError, setComponentsWithoutError] = useState([]);\r\n\r\n//     // Method to handle input changes for components without error\r\n//     const handleInputChangeWithoutError = (index, field, value) => {\r\n//         setComponentsWithoutError(prevComponents => {\r\n//             const updatedComponents = [...prevComponents];\r\n//             updatedComponents[index] = { ...updatedComponents[index], [field]: value };\r\n//             return updatedComponents;\r\n//         });\r\n//     };\r\n\r\n//     // Method to add a new component without error\r\n\r\n//     const handleAddComponentWithoutError = () => {\r\n//         setcountforcwithoute(count_for_cwithoute + 1);\r\n//         setComponentsWithoutError(prevComponents => [\r\n//             ...prevComponents,\r\n//             {\r\n//                 barcode: '',\r\n//                 audit_type: '',\r\n//                 case_status: '',\r\n//                 remarks: '',\r\n//                 remarks_for_operations: ''\r\n//             }\r\n//         ]);\r\n//     };\r\n\r\n\r\n//     // Method to remove a component without error by index\r\n//     const handleRemoveComponentWithoutError = (index) => {\r\n//         setComponentsWithoutError(prevComponents =>\r\n//             prevComponents.filter((_, i) => i !== index)\r\n//         );\r\n//         setcountforcwithoute(count_for_cwithoute - 1);\r\n//     };\r\n\r\n//     const handleInputChangeWithError = (index, field, value) => {\r\n//         const updatedComponents = [...componentsWithError];\r\n//         if (field === 'file') {\r\n//             updatedComponents[index][field] = value;\r\n//         } else {\r\n//             updatedComponents[index][field] = value;\r\n//         }\r\n//         setComponentsWithError(updatedComponents);\r\n\r\n//         if (field === 'barcode') {\r\n//             validateSubBarcodeforcwe(value, index);\r\n//         }\r\n//     };\r\n   \r\n    \r\n//     const handleFileInputChangeWithError = async (index, files) => {\r\n//         const updatedComponents = [...componentsWithError];\r\n        \r\n//         // Convert files to an array if not already\r\n//         const filesArray = Array.from(files);\r\n        \r\n//         // Convert files to base64 and store as objects\r\n//         const base64Files = await Promise.all(filesArray.map(async file => ({\r\n//             file: await convertToBase64(file)\r\n//         })));\r\n        \r\n//         updatedComponents[index]['file'] = base64Files;\r\n        \r\n//         setComponentsWithError(updatedComponents);\r\n//     };\r\n    \r\n//     const convertToBase64 = (file) => {\r\n//         return new Promise((resolve, reject) => {\r\n//             const reader = new FileReader();\r\n//             reader.readAsDataURL(file);\r\n//             reader.onload = () => resolve(reader.result);\r\n//             reader.onerror = error => reject(error);\r\n//         });\r\n//     };\r\n\r\n\r\n//     // Method to add a new component with error\r\n\r\n\r\n\r\n//     const handleAddComponentWithError = () => {\r\n//         setcountforcwe(count_for_cwe + 1);\r\n//         setComponentsWithError([\r\n//             ...componentsWithError,\r\n//             {\r\n//                 barcode: '',\r\n//                 audit_type: '',\r\n//                 case_error: '',\r\n//                 case_status: '',\r\n//                 remarks: '',\r\n//                 remarks_for_operations: '',\r\n//                 file: null\r\n//             }\r\n//         ]);\r\n//         setErrors([...errors, '']);\r\n//     };\r\n\r\n//     // Method to remove a component with error by index\r\n\r\n//     const handleRemoveComponentWithError = (index) => {\r\n//         const updatedComponents = componentsWithError.filter((_, i) => i !== index);\r\n//         const updatedErrors = errors.filter((_, i) => i !== index);\r\n//         setComponentsWithError(updatedComponents);\r\n//         setErrors(updatedErrors);\r\n//         setcountforcwe(count_for_cwe - 1);\r\n//     };\r\n\r\n\r\n//     const [addNewItem, setAddNewItem] = useState([]);\r\n\r\n//     const handleAddNewItem = () => {\r\n//         setcountforerrorcase(count_for_errorcase + 1);\r\n//         setAddNewItem([\r\n//             ...addNewItem,\r\n//             {\r\n//                 audit_type: '',\r\n//                 errorDefinition: '',\r\n//                 finalErrorCategory: '',\r\n//                 remarks: '',\r\n//                 remarks_for_operations: '',\r\n//                 file: null, // Add file property\r\n//             },\r\n//         ]);\r\n//     };\r\n\r\n//     const handleInputnewchange = (index, field, value) => {\r\n//         const updatedItems = addNewItem.map((item, i) =>\r\n//             i === index ? { ...item, [field]: value } : item\r\n//         );\r\n//         setAddNewItem(updatedItems);\r\n//     };\r\n\r\n// //////////////////////////////////\r\n// const handleFileChange = async (index, files) => {\r\n//     const updatedComponents = [...addNewItem];\r\n    \r\n//     // Convert files to an array if not already\r\n//     const filesArray = Array.from(files);\r\n    \r\n//     // Convert files to base64 and store as objects\r\n//     const base64Files = await Promise.all(filesArray.map(async file => ({\r\n//         file: await convertToBase64forcaseerror(file)\r\n//     })));\r\n    \r\n//     updatedComponents[index]['file'] = base64Files;\r\n    \r\n//     setAddNewItem(updatedComponents);\r\n// };\r\n\r\n// const convertToBase64forcaseerror = (file) => {\r\n//     return new Promise((resolve, reject) => {\r\n//         const reader = new FileReader();\r\n//         reader.readAsDataURL(file);\r\n//         reader.onload = () => resolve(reader.result);\r\n//         reader.onerror = error => reject(error);\r\n//     });\r\n// };\r\n\r\n//     const handleRemoveNewItem = (index) => {\r\n//         setcountforerrorcase(count_for_errorcase - 1);\r\n//         const updatedItems = addNewItem.filter((_, i) => i !== index);\r\n//         setAddNewItem(updatedItems);\r\n//     };\r\n\r\n\r\n\r\n\r\n\r\n//     return (\r\n//         <>\r\n//             {/* <Header /> */}\r\n//             <Box sx={{ width: '100%', padding: '50px 0', display: 'flex', justifyContent: 'center' }}>\r\n//                 <Paper elevation={0} sx={{ width: '100%', maxWidth: '1500px', padding: '20px', overflow: 'hidden', margin: '20px' }}>\r\n//                     <Typography variant=\"h3\" sx={{ color: '#D9531E', textAlign: 'center', marginBottom: '60px' }}>\r\n//                         Audit Portal\r\n//                     </Typography>\r\n\r\n\r\n//                     <form onSubmit={handleSubmit}>\r\n//                         <Grid container spacing={2}>\r\n//                             <Grid item xs={12} md={3}>\r\n//                                 <FormControl fullWidth>\r\n//                                     <InputLabel>Type of Audit</InputLabel>\r\n//                                     <Select required={isRequired}\r\n//                                         value={audit_type || ''}\r\n//                                         onChange={handleAuditChange}\r\n//                                         label=\"Type of Audit\"\r\n//                                     >\r\n//                                         {audit_type_check.map((item, index) => (\r\n//                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                         ))}\r\n\r\n\r\n\r\n\r\n//                                     </Select>\r\n//                                 </FormControl>\r\n//                             </Grid>\r\n//                             <Grid item xs={12} md={3}>\r\n//                                 <FormControl fullWidth>\r\n//                                     <TextField required={isRequired}\r\n//                                         label=\"Barcode\"\r\n//                                         placeholder=\"Barcode\"\r\n//                                         value={barcode}\r\n//                                         onChange={handleInpChange}\r\n//                                         inputProps={{ minLength: 16, maxLength: 16 }}\r\n//                                         error={!!error}\r\n//                                         helperText={error}\r\n//                                     />\r\n//                                 </FormControl>\r\n//                             </Grid>\r\n//                             <Grid item xs={12} md={3}>\r\n//                                 <FormControl fullWidth>\r\n//                                     <InputLabel>Status</InputLabel>\r\n//                                     <Select required={isRequired}\r\n//                                         value={case_status || ''}\r\n//                                         onChange={handleCaseStatusChange}\r\n//                                         label=\"Case Status\"\r\n//                                     >\r\n//                                         {audit_type_status.map((item, index) => (\r\n//                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                         ))}\r\n//                                     </Select>\r\n//                                 </FormControl>\r\n//                             </Grid>\r\n//                             <Grid item xs={12} md={3}>\r\n//                                 <FormControl fullWidth>\r\n//                                     <InputLabel>Is there any case error?</InputLabel>\r\n//                                     <Select required={isRequired}\r\n//                                         value={case_error || ''}\r\n//                                         onChange={handleCaseErrorChange}\r\n//                                         label=\"Case Error\"\r\n//                                     >\r\n//                                         {audit_type_is_there_any_case_error.map((item, index) => (\r\n//                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                         ))}\r\n//                                     </Select>\r\n//                                 </FormControl>\r\n//                             </Grid>\r\n\r\n\r\n//                             <Box sx={{ margin: '20px', width: '100%' }}>\r\n//                                 {addNewItem.map((item, index) => (\r\n//                                     <Box\r\n//                                         key={index}\r\n//                                         sx={{\r\n//                                             border: '1px solid #ddd',\r\n//                                             padding: '16px',\r\n//                                             margin: '16px 0',\r\n//                                             borderRadius: '8px',\r\n//                                             width: '100%',\r\n//                                         }}\r\n//                                     >\r\n\r\n//                                         {/* <h1>Counter For Case Error {count_for_errorcase}</h1> */}\r\n//                                         <Typography variant='h6' gutterBottom sx={{ marginBottom: '16px' }}>\r\n//                                             Case Error {index + 1}\r\n//                                         </Typography>\r\n\r\n//                                         <Grid container spacing={3}>\r\n//                                             <Grid item xs={12} sm={4}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Select Category</InputLabel>\r\n//                                                     <Select\r\n//                                                         required\r\n//                                                         value={item.select_category || ''}\r\n//                                                         onChange={(e) => handleInputnewchange(index, 'select_category', e.target.value)}\r\n//                                                         label=\"Select Category\"\r\n//                                                     >\r\n//                                                         {case_select_category.map((category, idx) => (\r\n//                                                             <MenuItem key={idx} value={category.value}>{category.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={4}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Error Definition</InputLabel>\r\n//                                                     <Select\r\n//                                                         required\r\n//                                                         value={item.errorDefinition || ''}\r\n//                                                         onChange={(e) => handleInputnewchange(index, 'errorDefinition', e.target.value)}\r\n//                                                         label=\"Error Definition\"\r\n//                                                     >\r\n//                                                         {case_error_definition.map((definition, idx) => (\r\n//                                                             <MenuItem key={idx} value={definition.value}>{definition.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={4}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Final Error Category</InputLabel>\r\n//                                                     <Select\r\n//                                                         required\r\n//                                                         value={item.finalErrorCategory || ''}\r\n//                                                         onChange={(e) => handleInputnewchange(index, 'finalErrorCategory', e.target.value)}\r\n//                                                         label=\"Final Error Category\"\r\n//                                                     >\r\n//                                                         {case_final_error_category.map((category, idx) => (\r\n//                                                             <MenuItem key={idx} value={category.value}>{category.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <TextField\r\n//                                                     multiline\r\n//                                                     rows={4}\r\n//                                                     label=\"Remarks\"\r\n//                                                     value={item.remarks}\r\n//                                                     onChange={(e) => handleInputnewchange(index, 'remarks', e.target.value)}\r\n//                                                     fullWidth\r\n//                                                 />\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <TextField\r\n//                                                     multiline\r\n//                                                     rows={4}\r\n//                                                     label=\"Remarks for Operations\"\r\n//                                                     value={item.remarks_for_operations}\r\n//                                                     onChange={(e) => handleInputnewchange(index, 'remarks_for_operations', e.target.value)}\r\n//                                                     fullWidth\r\n//                                                 />\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={12}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     {/* <InputLabel>Upload Files</InputLabel> */}\r\n//                                                     <TextField required\r\n//                                                         type=\"file\"\r\n//                                                         inputProps={{ multiple: true }} // Allow multiple file uploads\r\n//                                                         onChange={(e) => handleFileChange(index, e.target.files)}\r\n//                                                         fullWidth\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n\r\n//                                             <Grid item xs={12}>\r\n//                                                 <Grid container justifyContent=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n//                                                     <Grid item>\r\n//                                                         <CustomButton\r\n//                                                             onClick={() => handleRemoveNewItem(index)}\r\n//                                                             variant=\"outlined\"\r\n//                                                             color=\"error\"\r\n//                                                             sx={{ marginBottom: '20px', marginRight: '10px' }}\r\n//                                                         >\r\n//                                                             Remove Item\r\n//                                                         </CustomButton>\r\n//                                                     </Grid>\r\n//                                                     <Grid item>\r\n//                                                         <CustomButton\r\n//                                                             onClick={handleAddNewItem}\r\n//                                                             sx={{ marginBottom: '20px' }}\r\n//                                                         >\r\n//                                                             Add Item\r\n//                                                         </CustomButton>\r\n//                                                     </Grid>\r\n//                                                 </Grid>\r\n//                                             </Grid>\r\n//                                         </Grid>\r\n//                                     </Box>\r\n//                                 ))}\r\n//                             </Box>\r\n\r\n\r\n\r\n\r\n//                             {/* Components With Error */}\r\n\r\n\r\n//                             <Grid item xs={12} sx={{ marginTop: '20px' }}>\r\n//                                 {/* <h1>Counter For Cwe {count_for_cwe}</h1> */}\r\n\r\n//                                 <Typography variant='h4' gutterBottom sx={{ fontSize: '1.5rem' }}>\r\n//                                     Components With Error\r\n//                                 </Typography>\r\n//                                 <CustomButton onClick={handleAddComponentWithError}>\r\n//                                     Add Item\r\n//                                 </CustomButton>\r\n//                                 {componentsWithError.map((component, index) => (\r\n//                                     <Box key={index} sx={{ border: '1px solid #ccc', padding: '20px', margin: '20px 0', borderRadius: '8px', overflow: 'hidden' }}>\r\n//                                         <Typography variant='h6' gutterBottom>Component with Error {index + 1}</Typography>\r\n//                                         <Grid container spacing={2}>\r\n//                                             <Grid item xs={12}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <TextField required={isRequired}\r\n//                                                         label=\"Enter Sub Bar Code\"\r\n//                                                         value={component.sub_barcode || ''}\r\n\r\n\r\n//                                                         onChange={(e) => {\r\n//                                                             handleInputChangeWithError(index, 'sub_barcode', e.target.value.toUpperCase());\r\n//                                                             validateSubBarcodeforcwe(e.target.value, index);\r\n//                                                         }}\r\n\r\n//                                                         inputProps={{ minLength: 21, maxLength: 21 }}\r\n//                                                         error={Boolean(errors[index])}\r\n//                                                         helperText={errors[index]}\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={4}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Check Status</InputLabel>\r\n//                                                     <Select required={isRequired}\r\n//                                                         value={component.check_status || ''}\r\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'check_status', e.target.value)}\r\n//                                                         label=\"Check Status\"\r\n//                                                     >\r\n//                                                         {cwe_check_status.map((item, index) => (\r\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={4}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Error Definition</InputLabel>\r\n//                                                     <Select required={isRequired}\r\n//                                                         value={component.error_definition || ''}\r\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'error_definition', e.target.value)}\r\n//                                                         label=\"Error Definition\"\r\n//                                                     >\r\n//                                                         {cwe_error_definition.map((item, index) => (\r\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n\r\n\r\n//                                             <Grid item xs={12} sm={4}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Select Category</InputLabel>\r\n//                                                     <Select required={isRequired}\r\n//                                                         value={component.select_category || ''}\r\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'select_category', e.target.value)}\r\n//                                                         label=\"Select Category\"\r\n//                                                     >\r\n//                                                         {cwe_select_category.map((item, index) => (\r\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//                                             <Grid item xs={12} sm={12}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Change Status</InputLabel>\r\n//                                                     <Select required={isRequired}\r\n//                                                         value={component.change_status || ''}\r\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'change_status', e.target.value)}\r\n//                                                         label=\"Case Status\"\r\n//                                                     >\r\n//                                                         {cwe_change_status.map((item, index) => (\r\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <TextField multiline\r\n//                                                         rows={4}\r\n//                                                         label='Remarks'\r\n//                                                         variant='outlined'\r\n//                                                         value={component.remarks}\r\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'remarks', e.target.value)}\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <TextField multiline\r\n//                                                         rows={4}\r\n//                                                         label='Remarks for Operations'\r\n//                                                         variant='outlined'\r\n//                                                         value={component.remarks_for_operations}\r\n//                                                         onChange={(e) => handleInputChangeWithError(index, 'remarks_for_operations', e.target.value)}\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={12}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     {/* <InputLabel>Upload Files</InputLabel> */}\r\n//                                                     <TextField\r\n//                                                         type=\"file\"\r\n//                                                         inputProps={{ multiple: true }} // Allow multiple file uploads\r\n//                                                         onChange={(e) => handleFileInputChangeWithError(index, e.target.files)}\r\n//                                                         fullWidth\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12}>\r\n//                                                 <CustomButton onClick={() => handleRemoveComponentWithError(index)}>\r\n//                                                     Remove Item\r\n//                                                 </CustomButton>\r\n//                                             </Grid>\r\n//                                         </Grid>\r\n//                                     </Box>\r\n//                                 ))}\r\n//                             </Grid>\r\n\r\n//                             {/* Components Without Error */}\r\n//                             <Grid item xs={12} sx={{ marginTop: '20px' }}>\r\n\r\n//                                 {/* <h1>Counter For Cwithoute {count_for_cwithoute}</h1> */}\r\n//                                 <Typography variant='h4' gutterBottom sx={{ fontSize: '1.5rem' }}>\r\n//                                     Components Without Error\r\n//                                 </Typography>\r\n//                                 <CustomButton onClick={handleAddComponentWithoutError}>\r\n//                                     Add Item\r\n//                                 </CustomButton>\r\n//                                 {componentsWithoutError.map((component, index) => (\r\n//                                     <Box key={index} sx={{ border: '1px solid #ccc', padding: '20px', margin: '20px 0', borderRadius: '8px', overflow: 'hidden' }}>\r\n//                                         <Typography variant='h6' gutterBottom>Component Without Error {index + 1}</Typography>\r\n//                                         <Grid container spacing={2}>\r\n//                                             <Grid item xs={12}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <TextField required={isRequired}\r\n//                                                         label=\"Enter Sub Bar Code\"\r\n//                                                         value={component.sub_barcode}\r\n//                                                         onChange={(e) => {\r\n//                                                             handleInputChangeWithoutError(index, 'sub_barcode', e.target.value.toUpperCase());\r\n//                                                             validateSubBarcodeForCwithoutError(e.target.value, index);\r\n//                                                         }}\r\n//                                                         inputProps={{ minLength: 21, maxLength: 21 }}\r\n//                                                         error={Boolean(fieldErrors[index])}\r\n//                                                         helperText={fieldErrors[index]}\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Check Status</InputLabel>\r\n//                                                     <Select required={isRequired}\r\n//                                                         value={component.check_status || ''}\r\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'check_status', e.target.value)}\r\n//                                                         label=\"Check Status\"\r\n//                                                     >\r\n//                                                         {cwithoute_check_status.map((item, index) => (\r\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\r\n//                                                         ))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <InputLabel>Change Status</InputLabel>\r\n//                                                     <Select required={isRequired}\r\n//                                                         value={component.change_status || ''}\r\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'change_status', e.target.value)}\r\n//                                                         label=\"Change Status\"\r\n//                                                     >\r\n//                                                         {cwithoute_change_status.map((item, index) => (\r\n//                                                             <MenuItem key={index} value={item.value}>{item.name}</MenuItem>))}\r\n//                                                     </Select>\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <TextField multiline\r\n//                                                         rows={4}\r\n//                                                         label='Remarks'\r\n//                                                         variant='outlined'\r\n//                                                         value={component.remarks}\r\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'remarks', e.target.value)}\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12} sm={6}>\r\n//                                                 <FormControl fullWidth>\r\n//                                                     <TextField multiline\r\n//                                                         rows={4}\r\n//                                                         label='Remarks for Operations'\r\n//                                                         variant='outlined'\r\n//                                                         value={component.remarks_for_operations}\r\n//                                                         onChange={(e) => handleInputChangeWithoutError(index, 'remarks_for_operations', e.target.value)}\r\n//                                                     />\r\n//                                                 </FormControl>\r\n//                                             </Grid>\r\n//                                             <Grid item xs={12}>\r\n//                                                 <CustomButton onClick={() => handleRemoveComponentWithoutError(index)}>\r\n//                                                     Remove Item\r\n//                                                 </CustomButton>\r\n//                                             </Grid>\r\n//                                         </Grid>\r\n//                                     </Box>\r\n//                                 ))}\r\n//                             </Grid>\r\n\r\n\r\n\r\n//                             <Grid container item xs={12} spacing={2} sx={{ display: 'flex' }}>\r\n//                                 <Grid item> <CustomButton type=\"submit\">Submit</CustomButton></Grid>\r\n//                                 <Grid item> <CustomButton onClick={handleSave} >Save</CustomButton></Grid>\r\n//                             </Grid>\r\n\r\n//                             <Snackbar\r\n//                                 open={snackbarOpen}\r\n//                                 autoHideDuration={6000}\r\n//                                 onClose={handleCloseSnackbar}\r\n//                                 anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n//                             >\r\n//                                 <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%', maxWidth: 400 }}>\r\n//                                     All fields are required!\r\n//                                 </Alert>\r\n//                             </Snackbar>\r\n\r\n\r\n//                         </Grid>\r\n//                     </form>\r\n//                 </Paper>\r\n//             </Box>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default Landing;\r\n\r\n// import CustomButton from \"./CustomButton\";\r\n// import React, { useState, useEffect } from \"react\";\r\n\r\n// import {\r\n//     Grid,\r\n\r\n//     Typography,\r\n//     TextField,\r\n//     Box,\r\n//     Paper,\r\n//     Snackbar,\r\n//     Alert,\r\n// } from \"@mui/material\";\r\n// import axios from \"axios\";\r\n// // import \"../css/styles.css\";\r\n\r\n// import Cookies from \"js-cookie\";\r\n// import {\r\n//     audit_type_check,\r\n//     audit_type_status,\r\n//     audit_type_is_there_any_case_error,\r\n//     case_select_category,\r\n//     case_error_definition,\r\n//     case_final_error_category,\r\n// } from \"./options\";\r\n// import Cwe from \"./Cwe\";\r\n// import Cwithoute from \"./Cwithoute\";\r\n// import CustomInputLabel from \"./CustomInputLabel\";\r\n// import CustomFormControl from \"./CustomFormControl\";\r\n// import CustomSelect from \"./CustomSelect\";\r\n// import CustomTextField from \"./CustomTextField\";\r\n\r\n// const Landing = () => {\r\n//     const [barcode, setBarcode] = useState(\"\");\r\n//     const [audit_type, setAuditType] = useState(\"\");\r\n//     const [case_error, setCaseError] = useState(\"\");\r\n//     const [case_status, setCaseStatus] = useState(\"\");\r\n//     const [componentsWithError, setComponentsWithError] = useState([]);\r\n//     const [error, setError] = useState(\"\");\r\n\r\n//     const [fieldErrors, setFieldErrors] = useState([]);\r\n//     const [isRequiblack, setIsRequiblack] = useState(false);\r\n//     const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n//     const [select_category, selectCategory] = useState(\"\");\r\n//     const [sub_barcode, setSubbarcode] = useState(\"\");\r\n//     const [check_status, setCheckStatus] = useState(\"\");\r\n//     const [change_status, setChangeStatus] = useState(\"\");\r\n//     const [error_definition, setErrorDefinition] = useState(\"\");\r\n\r\n//     const [count_for_cwe, setcountforcwe] = useState(0);\r\n//     const check_counter_for_cwe_string = count_for_cwe.toString();\r\n\r\n//     const [count_for_cwithoute, setcountforcwithoute] = useState(0);\r\n//     const check_counter_for_cwithoute_string = count_for_cwithoute.toString();\r\n\r\n//     const [count_for_errorcase, setcountforerrorcase] = useState(0);\r\n\r\n//     const check_counter_for_errorcase_string = count_for_errorcase.toString();\r\n\r\n//     useEffect(() => {\r\n//         if (case_error === \"yes\" && addNewItem.length === 0) {\r\n//             handleAddNewItem();\r\n//         } else if (case_error === \"no\" || case_error === \"incomplete\") {\r\n//             setAddNewItem([]);\r\n//         }\r\n//     }, [case_error]);\r\n\r\n//     const validateBarcode = (barcode) => {\r\n//         const partialBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}$/;\r\n//         if (partialBarcodeRegex.test(barcode)) {\r\n//             return true;\r\n//         }\r\n//         return false;\r\n//     };\r\n\r\n//     const accessToken = Cookies.get(\"access_token\");\r\n//     const handleSaveOrSubmit = async (e, status) => {\r\n//         e.preventDefault();\r\n\r\n//         const formData = {\r\n//             barcode,\r\n//             audit_type,\r\n//             case_error,\r\n//             case_status,\r\n//             status: status,\r\n//             created_at: new Date().toISOString().split(\"T\")[0],\r\n//             error_cases: (addNewItem || []).map((item) => ({\r\n//                 select_category: item.select_category,\r\n//                 error_definition: item.errorDefinition,\r\n//                 final_error_category: item.finalErrorCategory,\r\n//                 remarks: item.remarks,\r\n//                 remarks_for_operations: item.remarks_for_operations,\r\n//                 files: (item.file || []).map((f) => ({\r\n//                     file: f.file,\r\n//                 })),\r\n//                 counter1: check_counter_for_errorcase_string,\r\n//             })),\r\n\r\n//             componentsWithError: (componentsWithError || []).map((component) => ({\r\n//                 select_category: component.select_category,\r\n//                 sub_barcode: component.sub_barcode,\r\n//                 change_status: component.change_status,\r\n//                 check_status: component.check_status,\r\n//                 remarks: component.remarks,\r\n//                 error_definition: component.error_definition,\r\n//                 remarks_for_operations: component.remarks_for_operations,\r\n//                 files: (component.file || []).map((f) => ({\r\n//                     file: f.file,\r\n//                 })),\r\n//                 counter2: check_counter_for_cwe_string,\r\n//             })),\r\n\r\n//             componentsWithoutError: (componentsWithoutError || []).map(\r\n//                 (component) => ({\r\n//                     sub_barcode: component.sub_barcode,\r\n//                     remarks: component.remarks,\r\n//                     remarks_for_operations: component.remarks_for_operations,\r\n//                     counter3: check_counter_for_cwithoute_string,\r\n//                     check_status: component.check_status,\r\n//                     change_status: component.change_status,\r\n//                 })\r\n//             ),\r\n//         };\r\n\r\n//         localStorage.setItem(\"formData\", JSON.stringify(formData));\r\n//         console.log({ formData });\r\n\r\n//         try {\r\n//             const response = await axios.post(\r\n//                 \"http://127.0.0.1:8000/api/auth/audit/\",\r\n//                 formData,\r\n//                 {\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\",\r\n//                         Authorization: `Bearer ${accessToken}`,\r\n//                     },\r\n//                 }\r\n//             );\r\n//             console.log(\"Response:\", response.data);\r\n//         } catch (error) {\r\n//             console.error(\"Error submitting form:\", error);\r\n//         }\r\n//     };\r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault();\r\n//         if (!barcode || !audit_type || !case_error || !case_status) {\r\n//             setSnackbarOpen(true);\r\n//             return;\r\n//         }\r\n//         if (!validateBarcode(barcode)) {\r\n//             alert(\"Please fill in the correct barcode.\");\r\n//             return;\r\n//         }\r\n//         handleSaveOrSubmit(e, \"submitted\");\r\n//         setIsRequiblack(true);\r\n//     };\r\n\r\n//     const handleSave = (e) => {\r\n//         handleSaveOrSubmit(e, \"draft\");\r\n//         setIsRequiblack(false);\r\n//         alert(\"Form Saved Successfully\");\r\n//     };\r\n//     const handleCloseSnackbar = () => {\r\n//         setSnackbarOpen(false);\r\n//     };\r\n\r\n//     const handleInpChange = (e) => {\r\n//         setBarcode(e.target.value.toUpperCase());\r\n//         if (!validateBarcode(e.target.value)) {\r\n//             setError(\"Invalid barcode\");\r\n//         } else {\r\n//             setError(\"\");\r\n//         }\r\n//     };\r\n//     const handleAuditChange = (e) => setAuditType(e.target.value);\r\n//     const handleCaseErrorChange = (e) => setCaseError(e.target.value);\r\n//     const handleCaseStatusChange = (e) => setCaseStatus(e.target.value);\r\n\r\n//     const [componentsWithoutError, setComponentsWithoutError] = useState([]);\r\n//     const [addNewItem, setAddNewItem] = useState([]);\r\n\r\n//     const handleAddNewItem = () => {\r\n//         setcountforerrorcase(count_for_errorcase + 1);\r\n//         setAddNewItem([\r\n//             ...addNewItem,\r\n//             {\r\n//                 audit_type: \"\",\r\n//                 errorDefinition: \"\",\r\n//                 finalErrorCategory: \"\",\r\n//                 remarks: \"\",\r\n//                 remarks_for_operations: \"\",\r\n//                 file: null,\r\n//             },\r\n//         ]);\r\n//     };\r\n\r\n//     const handleInputnewchange = (index, field, value) => {\r\n//         const updatedItems = addNewItem.map((item, i) =>\r\n//             i === index ? { ...item, [field]: value } : item\r\n//         );\r\n//         setAddNewItem(updatedItems);\r\n//     };\r\n\r\n//     const handleFileChange = async (index, files) => {\r\n//         const updatedComponents = [...addNewItem];\r\n\r\n//         const filesArray = Array.from(files);\r\n\r\n//         const base64Files = await Promise.all(\r\n//             filesArray.map(async (file) => ({\r\n//                 file: await convertToBase64forcaseerror(file),\r\n//             }))\r\n//         );\r\n\r\n//         updatedComponents[index][\"file\"] = base64Files;\r\n\r\n//         setAddNewItem(updatedComponents);\r\n//     };\r\n\r\n//     const convertToBase64forcaseerror = (file) => {\r\n//         return new Promise((resolve, reject) => {\r\n//             const reader = new FileReader();\r\n//             reader.readAsDataURL(file);\r\n//             reader.onload = () => resolve(reader.result);\r\n//             reader.onerror = (error) => reject(error);\r\n//         });\r\n//     };\r\n\r\n//     const handleRemoveNewItem = (index) => {\r\n//         setcountforerrorcase(count_for_errorcase - 1);\r\n//         const updatedItems = addNewItem.filter((_, i) => i !== index);\r\n//         setAddNewItem(updatedItems);\r\n//     };\r\n\r\n//     const handleComponentsUpdate = (updatedComponents) => {\r\n//         setComponentsWithoutError(updatedComponents);\r\n//     };\r\n\r\n//     const handleComponentsUpdateforcwe = (updatedComponents) => {\r\n//         setComponentsWithError(updatedComponents);\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             <Box\r\n//                 sx={{\r\n//                     width: \"100%\",\r\n//                     padding: \"50px 0\",\r\n//                     display: \"flex\",\r\n//                     justifyContent: \"center\",\r\n\r\n//                 }}\r\n//             >\r\n//                 <Paper\r\n//                     elevation={0}\r\n//                     sx={{\r\n//                         padding: \"50px 0px\",\r\n//                         width: \"100%\",\r\n//                         maxWidth: \"1500px\",\r\n//                         display: \"flex\",\r\n//                         gap: \"10px\",\r\n//                         padding: \"20px\",\r\n//                         overflow: \"hidden\",\r\n//                         margin: \"20px\",\r\n//                     }}\r\n//                 >\r\n//                     <Grid sx={{ width: \"100%\" }}>\r\n//                         <form onSubmit={handleSubmit}>\r\n//                             <Grid container spacing={3}>\r\n//                                 <Grid\r\n//                                     container\r\n//                                     spacing={2}\r\n//                                     sx={{ padding: \"40px 22px 0px 22px\", }}\r\n//                                 >\r\n//                                     <Grid item xs={12} md={3}>\r\n//                                         <CustomInputLabel label=\"Type of Audit\" />\r\n//                                         <CustomFormControl>\r\n//                                             <CustomSelect\r\n//                                                 value={audit_type}\r\n//                                                 onChange={handleAuditChange}\r\n//                                                 options={audit_type_check}\r\n//                                             />\r\n//                                         </CustomFormControl>\r\n//                                     </Grid>\r\n//                                     <Grid item xs={12} md={3}>\r\n//                                         <CustomInputLabel label=\"Barcode\" />\r\n\r\n//                                         <CustomFormControl>\r\n//                                             <CustomTextField\r\n//                                                 value={barcode}\r\n//                                                 onChange={handleInpChange}\r\n//                                                 error={error}\r\n//                                                 helperText={error}\r\n//                                                 placeholder=\"Enter your text here\"\r\n//                                                 minLength={16}\r\n//                                                 maxLength={16}\r\n//                                             />\r\n//                                         </CustomFormControl>\r\n//                                     </Grid>\r\n//                                     <Grid item xs={12} md={3}>\r\n//                                         <CustomInputLabel label=\"Status\" />\r\n//                                         <CustomFormControl>\r\n//                                             <CustomSelect\r\n//                                                 value={case_status}\r\n//                                                 onChange={handleCaseStatusChange}\r\n//                                                 options={audit_type_status}\r\n//                                             />\r\n//                                         </CustomFormControl>\r\n//                                     </Grid>\r\n//                                     <Grid item xs={12} md={3}>\r\n//                                         <CustomInputLabel label=\"Is there any case error?\" />\r\n\r\n//                                         <CustomFormControl>\r\n//                                             <CustomSelect\r\n//                                                 value={case_error}\r\n//                                                 onChange={handleCaseErrorChange}\r\n//                                                 options={audit_type_is_there_any_case_error}\r\n//                                             />\r\n//                                         </CustomFormControl>\r\n//                                     </Grid>\r\n//                                 </Grid>\r\n\r\n//                                 <Grid item xs={12} sx={{ marginTop: \"20px\" }}>\r\n//                                     {addNewItem.map((item, index) => (\r\n//                                         <Grid container key={index}>\r\n//                                             <Typography\r\n//                                                 variant=\"h6\"\r\n//                                                 gutterBottom\r\n//                                                 sx={{ marginBottom: \"16px\" }}\r\n//                                             >\r\n//                                                 Case Error {index + 1}\r\n//                                             </Typography>\r\n\r\n//                                             <Grid container spacing={3}>\r\n//                                                 <Grid item xs={12} sm={4}>\r\n//                                                     <CustomInputLabel label=\"Select Category\" />\r\n//                                                     <CustomFormControl>\r\n//                                                         <CustomSelect\r\n//                                                             value={item.select_category}\r\n//                                                             onChange={(e) => handleInputnewchange(index, 'select_category', e.target.value)}\r\n//                                                             options={case_select_category}\r\n//                                                         />\r\n\r\n//                                                     </CustomFormControl>\r\n//                                                 </Grid>\r\n//                                                 <Grid item xs={12} sm={4}>\r\n//                                                     <CustomInputLabel label=\"Error Definition\" />\r\n//                                                     <CustomFormControl>\r\n//                                                         <CustomSelect\r\n//                                                             value={item.errorDefinition || ''}\r\n//                                                             onChange={(e) => handleInputnewchange(index, 'errorDefinition', e.target.value)}\r\n//                                                             options={case_error_definition}\r\n//                                                         />\r\n\r\n//                                                     </CustomFormControl>\r\n//                                                 </Grid>\r\n//                                                 <Grid item xs={12} sm={4}>\r\n//                                                     <CustomInputLabel label=\"Final Error Category\" />\r\n//                                                     <CustomFormControl>\r\n\r\n//                                                         <CustomSelect\r\n//                                                             value={item.finalErrorCategory || ''}\r\n//                                                             onChange={(e) => handleInputnewchange(index, 'finalErrorCategory', e.target.value)}\r\n//                                                             options={case_final_error_category}\r\n//                                                         />\r\n\r\n//                                                     </CustomFormControl>\r\n//                                                 </Grid>\r\n//                                                 <Grid item xs={12} sm={6}>\r\n//                                                     <CustomInputLabel label=\"Remarks\" />\r\n//                                                     <CustomFormControl>\r\n//                                                         <TextField\r\n//                                                             multiline\r\n//                                                             rows={4}\r\n//                                                             value={item.remarks}\r\n//                                                             onChange={(e) =>\r\n//                                                                 handleInputnewchange(index, \"remarks\", e.target.value)\r\n//                                                             }\r\n//                                                             fullWidth\r\n//                                                             sx={{\r\n//                                                                 \"& .MuiOutlinedInput-root\": {\r\n//                                                                     \"& fieldset\": {\r\n//                                                                         borderColor: \"black\", // Set the border color to black\r\n//                                                                     },\r\n//                                                                     \"&:hover fieldset\": {\r\n//                                                                         borderColor: \"black\", // Set border color on hover\r\n//                                                                     },\r\n//                                                                     \"&.Mui-focused fieldset\": {\r\n//                                                                         borderColor: \"black\", // Set border color when focused\r\n//                                                                     },\r\n//                                                                 },\r\n//                                                                 \"& .MuiInputBase-input\": {\r\n//                                                                     color: \"black\", // Set the text color to black\r\n//                                                                 },\r\n//                                                             }}\r\n//                                                         />\r\n//                                                     </CustomFormControl>\r\n//                                                 </Grid>\r\n//                                                 <Grid item xs={12} sm={6}>\r\n//                                                     <CustomInputLabel label=\"Remarks for Operations\" />\r\n//                                                     <CustomFormControl>\r\n//                                                         <TextField\r\n//                                                             multiline\r\n//                                                             rows={4}\r\n//                                                             value={item.remarks_for_operations}\r\n//                                                             onChange={(e) =>\r\n//                                                                 handleInputnewchange(index, \"remarks_for_operations\", e.target.value)\r\n//                                                             }\r\n//                                                             fullWidth\r\n//                                                             sx={{\r\n//                                                                 \"& .MuiOutlinedInput-root\": {\r\n//                                                                     \"& fieldset\": {\r\n//                                                                         borderColor: \"black\", // Set the border color to black\r\n//                                                                     },\r\n//                                                                     \"&:hover fieldset\": {\r\n//                                                                         borderColor: \"black\", // Set border color on hover\r\n//                                                                     },\r\n//                                                                     \"&.Mui-focused fieldset\": {\r\n//                                                                         borderColor: \"black\", // Set border color when focused\r\n//                                                                     },\r\n//                                                                 },\r\n//                                                                 \"& .MuiInputBase-input\": {\r\n//                                                                     color: \"black\", // Set the text color to black\r\n//                                                                 },\r\n//                                                             }}\r\n//                                                         />\r\n//                                                     </CustomFormControl>\r\n//                                                 </Grid>\r\n//                                                 <Grid item xs={12} sm={12}>\r\n//                                                     <CustomFormControl>\r\n//                                                         <TextField\r\n//                                                             requiblack\r\n//                                                             type=\"file\"\r\n//                                                             inputProps={{ multiple: true }}\r\n//                                                             onChange={(e) =>\r\n//                                                                 handleFileChange(index, e.target.files)\r\n//                                                             }\r\n//                                                             fullWidth\r\n//                                                         />\r\n//                                                     </CustomFormControl>\r\n//                                                 </Grid>\r\n\r\n//                                                 <Grid item xs={12}>\r\n//                                                     <Grid\r\n//                                                         container\r\n//                                                         justifyContent=\"flex-start\"\r\n//                                                         alignItems=\"center\"\r\n//                                                         spacing={2}\r\n//                                                     >\r\n//                                                         <Grid item>\r\n//                                                             <CustomButton\r\n//                                                                 onClick={() => handleRemoveNewItem(index)}\r\n//                                                                 variant=\"outlined\"\r\n//                                                                 color=\"error\"\r\n//                                                                 sx={{\r\n//                                                                     marginBottom: \"20px\",\r\n//                                                                     marginRight: \"10px\",\r\n//                                                                 }}\r\n//                                                             >\r\n//                                                                 Remove Item\r\n//                                                             </CustomButton>\r\n//                                                         </Grid>\r\n//                                                         <Grid item>\r\n//                                                             <CustomButton\r\n//                                                                 onClick={handleAddNewItem}\r\n//                                                                 sx={{ marginBottom: \"20px\" }}\r\n//                                                             >\r\n//                                                                 Add Item\r\n//                                                             </CustomButton>\r\n//                                                         </Grid>\r\n//                                                     </Grid>\r\n//                                                 </Grid>\r\n//                                             </Grid>\r\n//                                         </Grid>\r\n//                                     ))}\r\n//                                 </Grid>\r\n\r\n//                                 <Cwe onComponentsUpdatecwe={handleComponentsUpdateforcwe} />\r\n\r\n//                                 <Cwithoute onComponentsUpdate={handleComponentsUpdate} />\r\n//                                 <Grid\r\n//                                     container\r\n//                                     item\r\n//                                     xs={12}\r\n//                                     spacing={2}\r\n//                                     sx={{ display: \"flex\" }}\r\n//                                 >\r\n//                                     <Grid item>\r\n//                                         {\" \"}\r\n//                                         <CustomButton type=\"submit\">Submit</CustomButton>\r\n//                                     </Grid>\r\n//                                     <Grid item>\r\n//                                         {\" \"}\r\n//                                         <CustomButton onClick={handleSave}>Save</CustomButton>\r\n//                                     </Grid>\r\n//                                 </Grid>\r\n\r\n//                                 <Snackbar\r\n//                                     open={snackbarOpen}\r\n//                                     autoHideDuration={6000}\r\n//                                     onClose={handleCloseSnackbar}\r\n//                                     anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n//                                 >\r\n//                                     <Alert\r\n//                                         onClose={handleCloseSnackbar}\r\n//                                         severity=\"error\"\r\n//                                         sx={{ width: \"100%\", maxWidth: 400 }}\r\n//                                     >\r\n//                                         All fields are requiblack!\r\n//                                     </Alert>\r\n//                                 </Snackbar>\r\n//                             </Grid>\r\n//                         </form>\r\n//                     </Grid>\r\n//                 </Paper>\r\n//             </Box>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default Landing;\r\n\r\n// first code ends here\r\n\r\n\r\n//second code start her\r\n\r\nimport CustomButton from \"../CustomButton\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    Box,\r\n    Paper,\r\n    Snackbar,\r\n    Alert,Divider\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport ContactMailIcon from '@mui/icons-material/ContactMail';\r\n\r\nimport {\r\n    audit_type_check,\r\n    audit_type_status,\r\n    audit_type_is_there_any_case_error,\r\n    case_select_category,\r\n    case_error_definition,\r\n    case_final_error_category,\r\n} from \"./options\";\r\nimport Cwe from \"./Cwe\";\r\nimport Cwithoute from \"./Cwithoute\";\r\nimport CustomInputLabel from \"./CustomInputLabel\";\r\nimport CustomFormControl from \"./CustomFormControl\";\r\nimport CustomSelect from \"./CustomSelect\";\r\nimport CustomTextField from \"./CustomTextField\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Landing = () => {\r\n    const [barcode, setBarcode] = useState(\"\");\r\n    const [audit_type, setAuditType] = useState(\"\");\r\n    const [case_error, setCaseError] = useState(\"\");\r\n    const [case_status, setCaseStatus] = useState(\"\");\r\n    const [componentsWithError, setComponentsWithError] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n    const [fieldErrors, setFieldErrors] = useState([]);\r\n    const [isRequiblack, setIsRequiblack] = useState(false);\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [select_category, selectCategory] = useState(\"\");\r\n    const [sub_barcode, setSubbarcode] = useState(\"\");\r\n    const [check_status, setCheckStatus] = useState(\"\");\r\n    const [change_status, setChangeStatus] = useState(\"\");\r\n    const [error_definition, setErrorDefinition] = useState(\"\");\r\n\r\n    const [count_for_cwe, setcountforcwe] = useState(0);\r\n    const check_counter_for_cwe_string = count_for_cwe.toString();\r\n    const [count_for_cwithoute, setcountforcwithoute] = useState(0);\r\n    const check_counter_for_cwithoute_string = count_for_cwithoute.toString();\r\n    const [count_for_errorcase, setcountforerrorcase] = useState(0);\r\n    const check_counter_for_errorcase_string = count_for_errorcase.toString();\r\n\r\n    useEffect(() => {\r\n        if (case_error === \"yes\" && addNewItem.length === 0) {\r\n            handleAddNewItem();\r\n        } else if (case_error === \"no\" || case_error === \"incomplete\") {\r\n            setAddNewItem([]);\r\n        }\r\n    }, [case_error]);\r\n\r\n    const validateBarcode = (barcode) => {\r\n        const partialBarcodeRegex = /^([A-Z]\\d{3}|[A-Z]{3}\\d)-\\d{2}\\d{2}-\\d{6,7}$/;\r\n        if (partialBarcodeRegex.test(barcode)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const accessToken = Cookies.get(\"access_token\");\r\n\r\n    const handleSaveOrSubmit = async (e, status) => {\r\n        e.preventDefault();\r\n        const formData = {\r\n            barcode,\r\n            audit_type,\r\n            case_error,\r\n            case_status,\r\n            status: status,\r\n            created_at: new Date().toISOString().split(\"T\")[0],\r\n            error_cases: (addNewItem || []).map((item) => ({\r\n                select_category: item.select_category,\r\n                error_definition: item.errorDefinition,\r\n                final_error_category: item.finalErrorCategory,\r\n                remarks: item.remarks,\r\n                remarks_for_operations: item.remarks_for_operations,\r\n                files: (item.file || []).map((f) => ({\r\n                    file: f.file,\r\n                })),\r\n                counter1: check_counter_for_errorcase_string,\r\n            })),\r\n            componentsWithError: (componentsWithError || []).map((component) => ({\r\n                select_category: component.select_category,\r\n                sub_barcode: component.sub_barcode,\r\n                change_status: component.change_status,\r\n                check_status: component.check_status,\r\n                remarks: component.remarks,\r\n                error_definition: component.error_definition,\r\n                remarks_for_operations: component.remarks_for_operations,\r\n                files: (component.file || []).map((f) => ({\r\n                    file: f.file,\r\n                })),\r\n                counter2: check_counter_for_cwe_string,\r\n            })),\r\n            componentsWithoutError: (componentsWithoutError || []).map(\r\n                (component) => ({\r\n                    sub_barcode: component.sub_barcode,\r\n                    remarks: component.remarks,\r\n                    remarks_for_operations: component.remarks_for_operations,\r\n                    counter3: check_counter_for_cwithoute_string,\r\n                    check_status: component.check_status,\r\n                    change_status: component.change_status,\r\n                })\r\n            ),\r\n        };\r\n\r\n        localStorage.setItem(\"formData\", JSON.stringify(formData));\r\n        console.log({ formData });\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://127.0.0.1:8000/api/auth/audit/\",\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${accessToken}`,\r\n                    },\r\n                }\r\n            );\r\n            console.log(\"Response:\", response.data);\r\n        } catch (error) {\r\n            console.error(\"Error submitting form:\", error);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!barcode || !audit_type || !case_error || !case_status) {\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validateBarcode(barcode)) {\r\n            alert(\"Please fill in the correct barcode.\");\r\n            return;\r\n        }\r\n        handleSaveOrSubmit(e, \"submitted\");\r\n        setIsRequiblack(true);\r\n    };\r\n\r\n    const handleSave = (e) => {\r\n        handleSaveOrSubmit(e, \"draft\");\r\n        setIsRequiblack(false);\r\n        alert(\"Form Saved Successfully\");\r\n    };\r\n\r\n    const handleCloseSnackbar = () => {\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    const handleInpChange = (e) => {\r\n        setBarcode(e.target.value.toUpperCase());\r\n        if (!validateBarcode(e.target.value)) {\r\n            setError(\"Invalid barcode\");\r\n        } else {\r\n            setError(\"\");\r\n        }\r\n    };\r\n\r\n    const handleAuditChange = (e) => setAuditType(e.target.value);\r\n    const handleCaseErrorChange = (e) => setCaseError(e.target.value);\r\n    const handleCaseStatusChange = (e) => setCaseStatus(e.target.value);\r\n\r\n    const [componentsWithoutError, setComponentsWithoutError] = useState([]);\r\n    const [addNewItem, setAddNewItem] = useState([]);\r\n\r\n    const handleAddNewItem = () => {\r\n        setcountforerrorcase(count_for_errorcase + 1);\r\n        setAddNewItem([\r\n            ...addNewItem,\r\n            {\r\n                select_category: \"\",\r\n                errorDefinition: \"\",\r\n                finalErrorCategory: \"\",\r\n                remarks: \"\",\r\n                remarks_for_operations: \"\",\r\n                file: null,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    const handleInputnewchange = (index, field, value) => {\r\n        const updatedItems = addNewItem.map((item, i) =>\r\n            i === index ? { ...item, [field]: value } : item\r\n        );\r\n        setAddNewItem(updatedItems);\r\n    };\r\n\r\n    const handleFileChange = async (index, files) => {\r\n        const updatedComponents = [...addNewItem];\r\n        const filesArray = Array.from(files);\r\n        const base64Files = await Promise.all(\r\n            filesArray.map(async (file) => ({\r\n                file: await convertToBase64forcaseerror(file),\r\n            }))\r\n        );\r\n\r\n        updatedComponents[index][\"file\"] = base64Files;\r\n        setAddNewItem(updatedComponents);\r\n    };\r\n\r\n    const convertToBase64forcaseerror = (file) => {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = (error) => reject(error);\r\n        });\r\n    };\r\n\r\n    const handleRemoveNewItem = (index) => {\r\n        setcountforerrorcase(count_for_errorcase - 1);\r\n        const updatedItems = addNewItem.filter((_, i) => i !== index);\r\n        setAddNewItem(updatedItems);\r\n    };\r\n\r\n    const handleComponentsUpdate = (updatedComponents) => {\r\n        setComponentsWithoutError(updatedComponents);\r\n    };\r\n\r\n    const handleComponentsUpdateforcwe = (updatedComponents) => {\r\n        setComponentsWithError(updatedComponents);\r\n    };\r\n\r\n    return (\r\n//         <>\r\n//     <Box\r\n//         sx={{\r\n//             width: \"100%\",\r\n//             padding: \"40px 0\",\r\n//             display: \"flex\",\r\n//             justifyContent: \"center\",\r\n//             backgroundColor: \"#f5f5f5\",\r\n//         }}\r\n//     >\r\n//         <Paper\r\n//             elevation={1}\r\n//             sx={{\r\n//                 padding: \"20px\",\r\n//                 width: \"100%\",\r\n//                 maxWidth: \"1400px\",\r\n//                 display: \"flex\",\r\n//                 gap: \"20px\",\r\n//                 overflow: \"hidden\",\r\n//                 borderRadius: \"8px\",\r\n//                 boxShadow: \"0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n//                 margin: \"20px\",\r\n//                 backgroundColor: \"#ffffff\",\r\n//             }}\r\n//         >\r\n//             {/* Sidebar Section */}\r\n            \r\n//         <Box\r\n//             sx={{\r\n//                 width: { xs: '100%', sm: '25%' },\r\n//                 padding: '20px',\r\n//                 borderRight: '1px solid #ddd',\r\n//                 backgroundColor: '#f5f5f5',\r\n//                 borderRadius: '8px',\r\n//                 boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',\r\n//                 display: 'flex',\r\n//                 flexDirection: 'column',\r\n//                 gap: '20px',\r\n//                 height: '100vh',\r\n//                 overflowY: 'auto',\r\n//             }}\r\n//         >\r\n//             <Typography variant=\"h6\" gutterBottom>\r\n//               Data Flow\r\n//             </Typography>\r\n//             <Divider sx={{ marginBottom: '10px' }} />\r\n//             <Link to=\"/home\" style={{ textDecoration: 'none' }}>\r\n//                 <Box\r\n//                     sx={{\r\n//                         display: 'flex',\r\n//                         alignItems: 'center',\r\n//                         padding: '10px',\r\n//                         borderRadius: '4px',\r\n//                         transition: 'background-color 0.3s',\r\n//                         '&:hover': {\r\n//                             backgroundColor: '#e0e0e0',\r\n//                         },\r\n//                     }}\r\n//                 >\r\n//                     <HomeIcon sx={{ marginRight: '10px', color: 'black' }} />\r\n//                     <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n//                         Home\r\n//                     </Typography>\r\n//                 </Box>\r\n//             </Link>\r\n//             <Link to=\"/about\" style={{ textDecoration: 'none' }}>\r\n//                 <Box\r\n//                     sx={{\r\n//                         display: 'flex',\r\n//                         alignItems: 'center',\r\n//                         padding: '10px',\r\n//                         borderRadius: '4px',\r\n//                         transition: 'background-color 0.3s',\r\n//                         '&:hover': {\r\n//                             backgroundColor: '#e0e0e0',\r\n//                         },\r\n//                     }}\r\n//                 >\r\n//                     <InfoIcon sx={{ marginRight: '10px', color: 'black' }} />\r\n//                     <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n//                         About\r\n//                     </Typography>\r\n//                 </Box>\r\n//             </Link>\r\n//             <Link to=\"/contact\" style={{ textDecoration: 'none' }}>\r\n//                 <Box\r\n//                     sx={{\r\n//                         display: 'flex',\r\n//                         alignItems: 'center',\r\n//                         padding: '10px',\r\n//                         borderRadius: '4px',\r\n//                         transition: 'background-color 0.3s',\r\n//                         '&:hover': {\r\n//                             backgroundColor: '#e0e0e0',\r\n//                         },\r\n//                     }}\r\n//                 >\r\n//                     <ContactMailIcon sx={{ marginRight: '10px', color: 'black' }} />\r\n//                     <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n//                         Contact\r\n//                     </Typography>\r\n//                 </Box>\r\n//             </Link>\r\n//         </Box>\r\n\r\n\r\n//             {/* Main Form Section */}\r\n//             <Box sx={{ width: \"75%\" }}>\r\n//                 <Typography variant=\"h5\" gutterBottom>\r\n//                     Audit Form\r\n//                 </Typography>\r\n\r\n//                 <form onSubmit={handleSubmit}>\r\n//                     <Grid container spacing={4}>\r\n//                         <Grid item xs={12} md={3}>\r\n//                             <CustomInputLabel label=\"Type of Audit\" />\r\n//                             <CustomFormControl>\r\n//                                 <CustomSelect\r\n//                                     value={audit_type}\r\n//                                     onChange={handleAuditChange}\r\n//                                     options={audit_type_check}\r\n//                                 />\r\n//                             </CustomFormControl>\r\n//                         </Grid>\r\n//                         <Grid item xs={12} md={3}>\r\n//                             <CustomInputLabel label=\"Barcode\" />\r\n//                             <CustomFormControl>\r\n//                                 <CustomTextField\r\n//                                     value={barcode}\r\n//                                     onChange={handleInpChange}\r\n//                                     error={Boolean(error)}\r\n//                                     helperText={error}\r\n//                                     placeholder=\"Enter your text here\"\r\n//                                     inputProps={{ maxLength: 16 }}\r\n//                                 />\r\n//                             </CustomFormControl>\r\n//                         </Grid>\r\n//                         <Grid item xs={12} md={3}>\r\n//                             <CustomInputLabel label=\"Status\" />\r\n//                             <CustomFormControl>\r\n//                                 <CustomSelect\r\n//                                     value={case_status}\r\n//                                     onChange={handleCaseStatusChange}\r\n//                                     options={audit_type_status}\r\n//                                 />\r\n//                             </CustomFormControl>\r\n//                         </Grid>\r\n//                         <Grid item xs={12} md={3}>\r\n//                             <CustomInputLabel label=\"Is there any case error?\" />\r\n//                             <CustomFormControl>\r\n//                                 <CustomSelect\r\n//                                     value={case_error}\r\n//                                     onChange={handleCaseErrorChange}\r\n//                                     options={audit_type_is_there_any_case_error}\r\n//                                 />\r\n//                             </CustomFormControl>\r\n//                         </Grid>\r\n//                     </Grid>\r\n\r\n//                     {/* Case Error Items */}\r\n//                     <Grid container spacing={4} sx={{ marginTop: \"20px\" }}>\r\n//                         {addNewItem.map((item, index) => (\r\n//                             <Grid item xs={12} key={index}>\r\n//                                 <Box\r\n//                                     sx={{\r\n//                                         border: \"1px solid #ddd\",\r\n//                                         borderRadius: \"8px\",\r\n//                                         padding: \"16px\",\r\n//                                         backgroundColor: \"#fafafa\",\r\n//                                         marginBottom: \"20px\",\r\n//                                     }}\r\n//                                 >\r\n//                                     <Typography variant=\"h6\" gutterBottom>\r\n//                                         Case Error {index + 1}\r\n//                                     </Typography>\r\n//                                     <Grid container spacing={4}>\r\n//                                         <Grid item xs={12} sm={4}>\r\n//                                             <CustomInputLabel label=\"Select Category\" />\r\n//                                             <CustomFormControl>\r\n//                                                 <CustomSelect\r\n//                                                     value={item.select_category}\r\n//                                                     onChange={(e) => handleInputnewchange(index, 'select_category', e.target.value)}\r\n//                                                     options={case_select_category}\r\n//                                                 />\r\n//                                             </CustomFormControl>\r\n//                                         </Grid>\r\n//                                         <Grid item xs={12} sm={4}>\r\n//                                             <CustomInputLabel label=\"Error Definition\" />\r\n//                                             <CustomFormControl>\r\n//                                                 <CustomSelect\r\n//                                                     value={item.errorDefinition || ''}\r\n//                                                     onChange={(e) => handleInputnewchange(index, 'errorDefinition', e.target.value)}\r\n//                                                     options={case_error_definition}\r\n//                                                 />\r\n//                                             </CustomFormControl>\r\n//                                         </Grid>\r\n//                                         <Grid item xs={12} sm={4}>\r\n//                                             <CustomInputLabel label=\"Final Error Category\" />\r\n//                                             <CustomFormControl>\r\n//                                                 <CustomSelect\r\n//                                                     value={item.finalErrorCategory || ''}\r\n//                                                     onChange={(e) => handleInputnewchange(index, 'finalErrorCategory', e.target.value)}\r\n//                                                     options={case_final_error_category}\r\n//                                                 />\r\n//                                             </CustomFormControl>\r\n//                                         </Grid>\r\n//                                         <Grid item xs={12} sm={6}>\r\n//                                             <CustomInputLabel label=\"Remarks\" />\r\n//                                             <CustomFormControl>\r\n//                                                 <CKEditor\r\n//                                                     editor={ClassicEditor}\r\n//                                                     data={item.remarks}\r\n//                                                     onChange={(event, editor) => {\r\n//                                                         const data = editor.getData();\r\n//                                                         handleInputnewchange(index, \"remarks\", data);\r\n//                                                     }}\r\n//                                                 />\r\n//                                             </CustomFormControl>\r\n//                                         </Grid>\r\n//                                         <Grid item xs={12} sm={6}>\r\n//                                             <CustomInputLabel label=\"Remarks for Operations\" />\r\n//                                             <CustomFormControl>\r\n//                                                 <CKEditor\r\n//                                                     editor={ClassicEditor}\r\n//                                                     data={item.remarks_for_operations}\r\n//                                                     onChange={(event, editor) => {\r\n//                                                         const data = editor.getData();\r\n//                                                         handleInputnewchange(index, \"remarks_for_operations\", data);\r\n//                                                     }}\r\n//                                                 />\r\n//                                             </CustomFormControl>\r\n//                                         </Grid>\r\n//                                         <Grid item xs={12}>\r\n//                                             <CustomFormControl>\r\n//                                                 <input\r\n//                                                     type=\"file\"\r\n//                                                     multiple\r\n//                                                     onChange={(e) => handleFileChange(index, e.target.files)}\r\n//                                                     style={{ width: \"100%\", border: \"1px solid #ddd\", padding: \"8px\", borderRadius: \"4px\" }}\r\n//                                                 />\r\n//                                             </CustomFormControl>\r\n//                                         </Grid>\r\n//                                         <Grid item xs={12}>\r\n//                                             <Grid container spacing={2} alignItems=\"center\">\r\n//                                                 <Grid item>\r\n//                                                     <CustomButton\r\n//                                                         onClick={() => handleRemoveNewItem(index)}\r\n//                                                         variant=\"outlined\"\r\n//                                                         color=\"error\"\r\n//                                                         sx={{ marginBottom: \"20px\", marginRight: \"10px\" }}\r\n//                                                     >\r\n//                                                         Remove Item\r\n//                                                     </CustomButton>\r\n//                                                 </Grid>\r\n//                                                 <Grid item>\r\n//                                                     <CustomButton\r\n//                                                         onClick={handleAddNewItem}\r\n//                                                         sx={{ marginBottom: \"20px\" }}\r\n//                                                     >\r\n//                                                         Add Item\r\n//                                                     </CustomButton>\r\n//                                                 </Grid>\r\n//                                             </Grid>\r\n//                                         </Grid>\r\n//                                     </Grid>\r\n//                                 </Box>\r\n//                             </Grid>\r\n//                         ))}\r\n//                     </Grid>\r\n\r\n//                     {/* Additional Components */}\r\n//                     <Cwe onComponentsUpdatecwe={handleComponentsUpdateforcwe} />\r\n//                     <Cwithoute onComponentsUpdate={handleComponentsUpdate} />\r\n\r\n//                     {/* Submit and Save Buttons */}\r\n//                     <Grid container spacing={2} sx={{ marginTop: \"20px\" }}>\r\n//                         <Grid item>\r\n//                             <CustomButton type=\"submit\" variant=\"contained\" color=\"primary\">\r\n//                                 Submit\r\n//                             </CustomButton>\r\n//                         </Grid>\r\n//                         <Grid item>\r\n//                             <CustomButton onClick={handleSave} variant=\"contained\" color=\"secondary\">\r\n//                                 Save\r\n//                             </CustomButton>\r\n//                         </Grid>\r\n//                     </Grid>\r\n\r\n//                     {/* Snackbar for Errors */}\r\n//                     <Snackbar\r\n//                         open={snackbarOpen}\r\n//                         autoHideDuration={6000}\r\n//                         onClose={handleCloseSnackbar}\r\n//                         anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n//                     >\r\n//                         <Alert\r\n//                             onClose={handleCloseSnackbar}\r\n//                             severity=\"error\"\r\n//                             sx={{ width: \"100%\", maxWidth: 400 }}\r\n//                         >\r\n//                             All fields are required!\r\n//                         </Alert>\r\n//                     </Snackbar>\r\n//                 </form>\r\n//             </Box>\r\n//         </Paper>\r\n//     </Box>\r\n// </>\r\n<>\r\n    <Box\r\n        sx={{\r\n            width: \"100%\",\r\n            padding: \"40px 0\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: \"#f5f5f5\",\r\n        }}\r\n    >\r\n        <Paper\r\n            elevation={1}\r\n            sx={{\r\n                padding: \"20px\",\r\n                width: \"100%\",\r\n                maxWidth: \"1400px\",\r\n                display: \"flex\",\r\n                gap: \"20px\",\r\n                overflow: \"hidden\",\r\n                borderRadius: \"8px\",\r\n                boxShadow: \"0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n                margin: \"20px\",\r\n                backgroundColor: \"#ffffff\",\r\n            }}\r\n        >\r\n            {/* Sidebar Section */}\r\n            <Box\r\n                sx={{\r\n                    width: { xs: '100%', sm: '25%' },\r\n                    padding: '20px',\r\n                    borderRight: '1px solid #ddd',\r\n                    backgroundColor: '#f5f5f5',\r\n                    borderRadius: '8px',\r\n                    boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    gap: '20px',\r\n                    height: '100vh',\r\n                    overflowY: 'auto',\r\n                }}\r\n            >\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Data Flow\r\n                </Typography>\r\n                <Divider sx={{ marginBottom: '10px' }} />\r\n                <Link to=\"/home\" style={{ textDecoration: 'none' }}>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            padding: '10px',\r\n                            borderRadius: '4px',\r\n                            transition: 'background-color 0.3s',\r\n                            '&:hover': {\r\n                                backgroundColor: '#e0e0e0',\r\n                            },\r\n                        }}\r\n                    >\r\n                        <HomeIcon sx={{ marginRight: '10px', color: 'black' }} />\r\n                        <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n                            Home\r\n                        </Typography>\r\n                    </Box>\r\n                </Link>\r\n                <Link to=\"/about\" style={{ textDecoration: 'none' }}>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            padding: '10px',\r\n                            borderRadius: '4px',\r\n                            transition: 'background-color 0.3s',\r\n                            '&:hover': {\r\n                                backgroundColor: '#e0e0e0',\r\n                            },\r\n                        }}\r\n                    >\r\n                        <InfoIcon sx={{ marginRight: '10px', color: 'black' }} />\r\n                        <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n                            About\r\n                        </Typography>\r\n                    </Box>\r\n                </Link>\r\n                <Link to=\"/contact\" style={{ textDecoration: 'none' }}>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            padding: '10px',\r\n                            borderRadius: '4px',\r\n                            transition: 'background-color 0.3s',\r\n                            '&:hover': {\r\n                                backgroundColor: '#e0e0e0',\r\n                            },\r\n                        }}\r\n                    >\r\n                        <ContactMailIcon sx={{ marginRight: '10px', color: 'black' }} />\r\n                        <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n                            Contact\r\n                        </Typography>\r\n                    </Box>\r\n                </Link>\r\n            </Box>\r\n\r\n            {/* Main Form Section */}\r\n            <Box sx={{ width: \"75%\" }}>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Audit Form\r\n                </Typography>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} md={3}>\r\n                            <CustomInputLabel label=\"Type of Audit\" />\r\n                            <CustomFormControl>\r\n                                <CustomSelect\r\n                                    value={audit_type}\r\n                                    onChange={handleAuditChange}\r\n                                    options={audit_type_check}\r\n                                />\r\n                            </CustomFormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <CustomInputLabel label=\"Barcode\" />\r\n                            <CustomFormControl>\r\n                                <CustomTextField\r\n                                    value={barcode}\r\n                                    onChange={handleInpChange}\r\n                                    error={Boolean(error)}\r\n                                    helperText={error}\r\n                                    placeholder=\"Enter your text here\"\r\n                                    inputProps={{ maxLength: 16 }}\r\n                                />\r\n                            </CustomFormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <CustomInputLabel label=\"Status\" />\r\n                            <CustomFormControl>\r\n                                <CustomSelect\r\n                                    value={case_status}\r\n                                    onChange={handleCaseStatusChange}\r\n                                    options={audit_type_status}\r\n                                />\r\n                            </CustomFormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3}>\r\n                            <CustomInputLabel label=\"Is there any case error?\" />\r\n                            <CustomFormControl>\r\n                                <CustomSelect\r\n                                    value={case_error}\r\n                                    onChange={handleCaseErrorChange}\r\n                                    options={audit_type_is_there_any_case_error}\r\n                                />\r\n                            </CustomFormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    {/* Case Error Items */}\r\n                    <Grid container spacing={4} sx={{ marginTop: \"20px\" }}>\r\n                        {addNewItem.map((item, index) => (\r\n                            <Grid item xs={12} key={index}>\r\n                                <Box\r\n                                    sx={{\r\n                                        border: \"1px solid #ddd\",\r\n                                        borderRadius: \"8px\",\r\n                                        padding: \"16px\",\r\n                                        backgroundColor: \"#fafafa\",\r\n                                        marginBottom: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    <Typography variant=\"h6\" gutterBottom>\r\n                                        Case Error {index + 1}\r\n                                    </Typography>\r\n                                    <Grid container spacing={4}>\r\n                                        <Grid item xs={12} sm={4}>\r\n                                            <CustomInputLabel label=\"Select Category\" />\r\n                                            <CustomFormControl>\r\n                                                <CustomSelect\r\n                                                    value={item.select_category}\r\n                                                    onChange={(e) => handleInputnewchange(index, 'select_category', e.target.value)}\r\n                                                    options={case_select_category}\r\n                                                />\r\n                                            </CustomFormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={4}>\r\n                                            <CustomInputLabel label=\"Error Definition\" />\r\n                                            <CustomFormControl>\r\n                                                <CustomSelect\r\n                                                    value={item.errorDefinition || ''}\r\n                                                    onChange={(e) => handleInputnewchange(index, 'errorDefinition', e.target.value)}\r\n                                                    options={case_error_definition}\r\n                                                />\r\n                                            </CustomFormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={4}>\r\n                                            <CustomInputLabel label=\"Final Error Category\" />\r\n                                            <CustomFormControl>\r\n                                                <CustomSelect\r\n                                                    value={item.finalErrorCategory || ''}\r\n                                                    onChange={(e) => handleInputnewchange(index, 'finalErrorCategory', e.target.value)}\r\n                                                    options={case_final_error_category}\r\n                                                />\r\n                                            </CustomFormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <CustomInputLabel label=\"Remarks\" />\r\n                                            <CustomFormControl>\r\n                                                <CustomTextField\r\n                                                    value={item.remarks}\r\n                                                    onChange={(e) => handleInputnewchange(index, \"remarks\", e.target.value)}\r\n                                                    multiline\r\n                                                    rows={4}\r\n                                                    placeholder=\"Enter remarks here\"\r\n                                                />\r\n                                            </CustomFormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <CustomInputLabel label=\"Remarks for Operations\" />\r\n                                            <CustomFormControl>\r\n                                                <CustomTextField\r\n                                                    value={item.remarks_for_operations}\r\n                                                    onChange={(e) => handleInputnewchange(index, \"remarks_for_operations\", e.target.value)}\r\n                                                    multiline\r\n                                                    rows={4}\r\n                                                    placeholder=\"Enter remarks for operations here\"\r\n                                                />\r\n                                            </CustomFormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <CustomFormControl>\r\n                                                <input\r\n                                                    type=\"file\"\r\n                                                    multiple\r\n                                                    onChange={(e) => handleFileChange(index, e.target.files)}\r\n                                                    style={{ width: \"100%\", border: \"1px solid #ddd\", padding: \"8px\", borderRadius: \"4px\" }}\r\n                                                />\r\n                                            </CustomFormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Grid container spacing={2} alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <CustomButton\r\n                                                        onClick={() => handleRemoveNewItem(index)}\r\n                                                        variant=\"outlined\"\r\n                                                        color=\"error\"\r\n                                                        sx={{ marginBottom: \"20px\", marginRight: \"10px\" }}\r\n                                                    >\r\n                                                        Remove Item\r\n                                                    </CustomButton>\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <CustomButton\r\n                                                        onClick={handleAddNewItem}\r\n                                                        sx={{ marginBottom: \"20px\" }}\r\n                                                    >\r\n                                                        Add Item\r\n                                                    </CustomButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Box>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n\r\n                    {/* Additional Components */}\r\n                    <Cwe onComponentsUpdatecwe={handleComponentsUpdate} />\r\n                    <Cwithoute onComponentsUpdate={handleComponentsUpdateforcwe} />\r\n\r\n                    {/* Submit Button */}\r\n                    <Grid container spacing={2} justifyContent=\"flex-end\" sx={{ marginTop: \"20px\" }}>\r\n                        <Grid item>\r\n                            <CustomButton type=\"submit\" variant=\"contained\">\r\n                                Submit\r\n                            </CustomButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </Box>\r\n        </Paper>\r\n    </Box>\r\n</>\r\n\r\n\r\n\r\n        \r\n    );\r\n};\r\n\r\nexport default Landing;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;;AAEA;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAOA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAciBAAiB;AAC1C,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACIC,IAAI,EACJC,UAAU,EACVC,GAAG,EACHC,KAAK,EACLC,QAAQ,EACRC,KAAK,EAACC,OAAO,QACV,eAAe;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,eAAe,MAAM,iCAAiC;AAE7D,SACIC,gBAAgB,EAChBC,iBAAiB,EACjBC,kCA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A;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}